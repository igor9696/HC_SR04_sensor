
HC-04_Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b20  08003b20  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b24  08003b24  00013b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  20000070  08003b98  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003b98  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d361  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f8  00000000  00000000  0002d3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  0002f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00030298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001832a  00000000  00000000  00030e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de73  00000000  00000000  0004917a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad3f  00000000  00000000  00056fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1d2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003738  00000000  00000000  000e1d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a98 	.word	0x08003a98

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003a98 	.word	0x08003a98

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000160:	4b35      	ldr	r3, [pc, #212]	; (8000238 <MX_GPIO_Init+0xec>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a34      	ldr	r2, [pc, #208]	; (8000238 <MX_GPIO_Init+0xec>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b32      	ldr	r3, [pc, #200]	; (8000238 <MX_GPIO_Init+0xec>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0310 	and.w	r3, r3, #16
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000178:	4b2f      	ldr	r3, [pc, #188]	; (8000238 <MX_GPIO_Init+0xec>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a2e      	ldr	r2, [pc, #184]	; (8000238 <MX_GPIO_Init+0xec>)
 800017e:	f043 0320 	orr.w	r3, r3, #32
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b2c      	ldr	r3, [pc, #176]	; (8000238 <MX_GPIO_Init+0xec>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0320 	and.w	r3, r3, #32
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000190:	4b29      	ldr	r3, [pc, #164]	; (8000238 <MX_GPIO_Init+0xec>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a28      	ldr	r2, [pc, #160]	; (8000238 <MX_GPIO_Init+0xec>)
 8000196:	f043 0304 	orr.w	r3, r3, #4
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b26      	ldr	r3, [pc, #152]	; (8000238 <MX_GPIO_Init+0xec>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a8:	4b23      	ldr	r3, [pc, #140]	; (8000238 <MX_GPIO_Init+0xec>)
 80001aa:	699b      	ldr	r3, [r3, #24]
 80001ac:	4a22      	ldr	r2, [pc, #136]	; (8000238 <MX_GPIO_Init+0xec>)
 80001ae:	f043 0308 	orr.w	r3, r3, #8
 80001b2:	6193      	str	r3, [r2, #24]
 80001b4:	4b20      	ldr	r3, [pc, #128]	; (8000238 <MX_GPIO_Init+0xec>)
 80001b6:	699b      	ldr	r3, [r3, #24]
 80001b8:	f003 0308 	and.w	r3, r3, #8
 80001bc:	603b      	str	r3, [r7, #0]
 80001be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIG_Pin, GPIO_PIN_RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 7108 	mov.w	r1, #544	; 0x220
 80001c6:	481d      	ldr	r0, [pc, #116]	; (800023c <MX_GPIO_Init+0xf0>)
 80001c8:	f000 ffb8 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001d2:	4b1b      	ldr	r3, [pc, #108]	; (8000240 <MX_GPIO_Init+0xf4>)
 80001d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d6:	2300      	movs	r3, #0
 80001d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	4619      	mov	r1, r3
 80001e0:	4818      	ldr	r0, [pc, #96]	; (8000244 <MX_GPIO_Init+0xf8>)
 80001e2:	f000 fe27 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80001e6:	2320      	movs	r3, #32
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ea:	2301      	movs	r3, #1
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f2:	2302      	movs	r3, #2
 80001f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80001f6:	f107 0310 	add.w	r3, r7, #16
 80001fa:	4619      	mov	r1, r3
 80001fc:	480f      	ldr	r0, [pc, #60]	; (800023c <MX_GPIO_Init+0xf0>)
 80001fe:	f000 fe19 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000206:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000208:	2301      	movs	r3, #1
 800020a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020c:	2300      	movs	r3, #0
 800020e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000210:	2301      	movs	r3, #1
 8000212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000214:	f107 0310 	add.w	r3, r7, #16
 8000218:	4619      	mov	r1, r3
 800021a:	4808      	ldr	r0, [pc, #32]	; (800023c <MX_GPIO_Init+0xf0>)
 800021c:	f000 fe0a 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000220:	2200      	movs	r2, #0
 8000222:	2100      	movs	r1, #0
 8000224:	2028      	movs	r0, #40	; 0x28
 8000226:	f000 fd1e 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800022a:	2028      	movs	r0, #40	; 0x28
 800022c:	f000 fd37 	bl	8000c9e <HAL_NVIC_EnableIRQ>

}
 8000230:	bf00      	nop
 8000232:	3720      	adds	r7, #32
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800
 8000240:	10110000 	.word	0x10110000
 8000244:	40011000 	.word	0x40011000

08000248 <delay_us>:
#include "main.h"
#include "hc_sr04.h"


void delay_us(uint16_t us)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	4603      	mov	r3, r0
 8000250:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(TIMER_DELAY);
 8000252:	4809      	ldr	r0, [pc, #36]	; (8000278 <delay_us+0x30>)
 8000254:	f001 fc16 	bl	8001a84 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(TIMER_DELAY,0);
 8000258:	4b07      	ldr	r3, [pc, #28]	; (8000278 <delay_us+0x30>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(TIMER_DELAY) < us);
 8000260:	bf00      	nop
 8000262:	4b05      	ldr	r3, [pc, #20]	; (8000278 <delay_us+0x30>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000268:	88fb      	ldrh	r3, [r7, #6]
 800026a:	429a      	cmp	r2, r3
 800026c:	d3f9      	bcc.n	8000262 <delay_us+0x1a>
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	200000c0 	.word	0x200000c0

0800027c <set_trigger>:


static void set_trigger()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000286:	4807      	ldr	r0, [pc, #28]	; (80002a4 <set_trigger+0x28>)
 8000288:	f000 ff58 	bl	800113c <HAL_GPIO_WritePin>
	delay_us(10);
 800028c:	200a      	movs	r0, #10
 800028e:	f7ff ffdb 	bl	8000248 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <set_trigger+0x28>)
 800029a:	f000 ff4f 	bl	800113c <HAL_GPIO_WritePin>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800

080002a8 <HCSR04_get_measure>:

static uint16_t HCSR04_get_measure()
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_TIM_IC_Start_IT(TIMER_IC, TIM_CHANNEL_1);
 80002ac:	2100      	movs	r1, #0
 80002ae:	480b      	ldr	r0, [pc, #44]	; (80002dc <HCSR04_get_measure+0x34>)
 80002b0:	f001 fc8a 	bl	8001bc8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(TIMER_IC, TIM_CHANNEL_2);
 80002b4:	2104      	movs	r1, #4
 80002b6:	4809      	ldr	r0, [pc, #36]	; (80002dc <HCSR04_get_measure+0x34>)
 80002b8:	f001 fc86 	bl	8001bc8 <HAL_TIM_IC_Start_IT>

	measure_flag = 1; // when measure is finished flag will be 0
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <HCSR04_get_measure+0x38>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
	set_trigger(); // set trigger pin high for 10us
 80002c2:	f7ff ffdb 	bl	800027c <set_trigger>

	while(measure_flag); // wait until measure cycle is finished
 80002c6:	bf00      	nop
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HCSR04_get_measure+0x38>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d1fa      	bne.n	80002c8 <HCSR04_get_measure+0x20>

	return pulse_time;
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <HCSR04_get_measure+0x3c>)
 80002d4:	881b      	ldrh	r3, [r3, #0]
 80002d6:	b29b      	uxth	r3, r3
}
 80002d8:	4618      	mov	r0, r3
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000108 	.word	0x20000108
 80002e0:	2000009a 	.word	0x2000009a
 80002e4:	2000009c 	.word	0x2000009c

080002e8 <HCSR04_get_distance_cm>:



uint16_t HCSR04_get_distance_cm()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	 //1. Set TRIG pin HIGH for 10ms
	 //2. Measure Echo Pin High state time
	uint16_t distance_cm;
	distance_cm = HCSR04_get_measure() / 58;
 80002ee:	f7ff ffdb 	bl	80002a8 <HCSR04_get_measure>
 80002f2:	4603      	mov	r3, r0
 80002f4:	461a      	mov	r2, r3
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HCSR04_get_distance_cm+0x24>)
 80002f8:	fba3 2302 	umull	r2, r3, r3, r2
 80002fc:	095b      	lsrs	r3, r3, #5
 80002fe:	80fb      	strh	r3, [r7, #6]

	return distance_cm;
 8000300:	88fb      	ldrh	r3, [r7, #6]
}
 8000302:	4618      	mov	r0, r3
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	8d3dcb09 	.word	0x8d3dcb09

08000310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fb49 	bl	80009ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f000 f829 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031e:	f7ff ff15 	bl	800014c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000322:	f000 faad 	bl	8000880 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000326:	f000 f977 	bl	8000618 <MX_TIM1_Init>
  MX_TIM3_Init();
 800032a:	f000 f9f7 	bl	800071c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800032e:	f000 f860 	bl	80003f2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t distance=0;
 8000332:	2300      	movs	r3, #0
 8000334:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  distance = HCSR04_get_distance_cm();
 8000336:	f7ff ffd7 	bl	80002e8 <HCSR04_get_distance_cm>
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
	  sprintf((char*)&sensor_distance, "Distance:%d cm\n\r", distance);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	461a      	mov	r2, r3
 8000342:	4908      	ldr	r1, [pc, #32]	; (8000364 <main+0x54>)
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x58>)
 8000346:	f002 ff6d 	bl	8003224 <siprintf>
  	  HAL_UART_Transmit(&huart2, &sensor_distance, sizeof(sensor_distance), 1000);
 800034a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800034e:	2220      	movs	r2, #32
 8000350:	4905      	ldr	r1, [pc, #20]	; (8000368 <main+0x58>)
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <main+0x5c>)
 8000354:	f002 faa9 	bl	80028aa <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035c:	f000 fb88 	bl	8000a70 <HAL_Delay>
	  distance = HCSR04_get_distance_cm();
 8000360:	e7e9      	b.n	8000336 <main+0x26>
 8000362:	bf00      	nop
 8000364:	08003ab0 	.word	0x08003ab0
 8000368:	200000a0 	.word	0x200000a0
 800036c:	20000150 	.word	0x20000150

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b090      	sub	sp, #64	; 0x40
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	2228      	movs	r2, #40	; 0x28
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f002 ff48 	bl	8003214 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
 8000390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000392:	2302      	movs	r3, #2
 8000394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000396:	2301      	movs	r3, #1
 8000398:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800039a:	2310      	movs	r3, #16
 800039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800039e:	2302      	movs	r3, #2
 80003a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003a2:	2300      	movs	r3, #0
 80003a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ac:	f107 0318 	add.w	r3, r7, #24
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 fefd 	bl	80011b0 <HAL_RCC_OscConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003bc:	f000 f860 	bl	8000480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c0:	230f      	movs	r3, #15
 80003c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c4:	2302      	movs	r3, #2
 80003c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f968 	bl	80016b0 <HAL_RCC_ClockConfig>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80003e6:	f000 f84b 	bl	8000480 <Error_Handler>
  }
}
 80003ea:	bf00      	nop
 80003ec:	3740      	adds	r7, #64	; 0x40
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	af00      	add	r7, sp, #0
  /* TIM1_CC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2100      	movs	r1, #0
 80003fa:	201b      	movs	r0, #27
 80003fc:	f000 fc33 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000400:	201b      	movs	r0, #27
 8000402:	f000 fc4c 	bl	8000c9e <HAL_NVIC_EnableIRQ>
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if(htim == TIMER_IC)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a16      	ldr	r2, [pc, #88]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d124      	bne.n	8000466 <HAL_TIM_IC_CaptureCallback+0x5a>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	7f1b      	ldrb	r3, [r3, #28]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d10a      	bne.n	800043a <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_RisingEdge = __HAL_TIM_GET_COMPARE(TIMER_IC, TIM_CHANNEL_1);
 8000424:	4b12      	ldr	r3, [pc, #72]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	b29a      	uxth	r2, r3
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_TIM_IC_CaptureCallback+0x68>)
 800042e:	801a      	strh	r2, [r3, #0]
			HAL_TIM_IC_Start_IT(TIMER_IC, TIM_CHANNEL_1);
 8000430:	2100      	movs	r1, #0
 8000432:	480f      	ldr	r0, [pc, #60]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000434:	f001 fbc8 	bl	8001bc8 <HAL_TIM_IC_Start_IT>
			HAL_TIM_IC_Start_IT(TIMER_IC, TIM_CHANNEL_2);

		}

	}
}
 8000438:	e015      	b.n	8000466 <HAL_TIM_IC_CaptureCallback+0x5a>
		else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	7f1b      	ldrb	r3, [r3, #28]
 800043e:	2b02      	cmp	r3, #2
 8000440:	d111      	bne.n	8000466 <HAL_TIM_IC_CaptureCallback+0x5a>
			pulse_time = __HAL_TIM_GET_COMPARE(TIMER_IC, TIM_CHANNEL_2) - IC_RisingEdge;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	b29a      	uxth	r2, r3
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_TIM_IC_CaptureCallback+0x68>)
 800044c:	881b      	ldrh	r3, [r3, #0]
 800044e:	b29b      	uxth	r3, r3
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	b29a      	uxth	r2, r3
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000456:	801a      	strh	r2, [r3, #0]
			measure_flag = 0;
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <HAL_TIM_IC_CaptureCallback+0x70>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Start_IT(TIMER_IC, TIM_CHANNEL_2);
 800045e:	2104      	movs	r1, #4
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000462:	f001 fbb1 	bl	8001bc8 <HAL_TIM_IC_Start_IT>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000108 	.word	0x20000108
 8000474:	20000098 	.word	0x20000098
 8000478:	2000009c 	.word	0x2000009c
 800047c:	2000009a 	.word	0x2000009a

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	e7fe      	b.n	8000488 <Error_Handler+0x8>
	...

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_MspInit+0x60>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <HAL_MspInit+0x60>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000536:	f000 fa7f 	bl	8000a38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800053a:	bf00      	nop
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <TIM1_UP_IRQHandler+0x10>)
 8000546:	f001 fc45 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000108 	.word	0x20000108

08000554 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <TIM1_CC_IRQHandler+0x10>)
 800055a:	f001 fc3b 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000108 	.word	0x20000108

08000568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <TIM3_IRQHandler+0x10>)
 800056e:	f001 fc31 	bl	8001dd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000c0 	.word	0x200000c0

0800057c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USART2_IRQHandler+0x10>)
 8000582:	f002 fa25 	bl	80029d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000150 	.word	0x20000150

08000590 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000594:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000598:	f000 fde8 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}

080005a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <_sbrk+0x5c>)
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <_sbrk+0x60>)
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005b4:	4b13      	ldr	r3, [pc, #76]	; (8000604 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d102      	bne.n	80005c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <_sbrk+0x64>)
 80005be:	4a12      	ldr	r2, [pc, #72]	; (8000608 <_sbrk+0x68>)
 80005c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <_sbrk+0x64>)
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	d207      	bcs.n	80005e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d0:	f002 fdf6 	bl	80031c0 <__errno>
 80005d4:	4603      	mov	r3, r0
 80005d6:	220c      	movs	r2, #12
 80005d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	e009      	b.n	80005f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <_sbrk+0x64>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4413      	add	r3, r2
 80005ee:	4a05      	ldr	r2, [pc, #20]	; (8000604 <_sbrk+0x64>)
 80005f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20005000 	.word	0x20005000
 8000600:	00000400 	.word	0x00000400
 8000604:	2000008c 	.word	0x2000008c
 8000608:	200001a8 	.word	0x200001a8

0800060c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0318 	add.w	r3, r7, #24
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <MX_TIM1_Init+0xfc>)
 8000644:	4a34      	ldr	r2, [pc, #208]	; (8000718 <MX_TIM1_Init+0x100>)
 8000646:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8000648:	4b32      	ldr	r3, [pc, #200]	; (8000714 <MX_TIM1_Init+0xfc>)
 800064a:	2240      	movs	r2, #64	; 0x40
 800064c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064e:	4b31      	ldr	r3, [pc, #196]	; (8000714 <MX_TIM1_Init+0xfc>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000654:	4b2f      	ldr	r3, [pc, #188]	; (8000714 <MX_TIM1_Init+0xfc>)
 8000656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800065a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <MX_TIM1_Init+0xfc>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000662:	4b2c      	ldr	r3, [pc, #176]	; (8000714 <MX_TIM1_Init+0xfc>)
 8000664:	2200      	movs	r2, #0
 8000666:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <MX_TIM1_Init+0xfc>)
 800066a:	2200      	movs	r2, #0
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800066e:	4829      	ldr	r0, [pc, #164]	; (8000714 <MX_TIM1_Init+0xfc>)
 8000670:	f001 f9b8 	bl	80019e4 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800067a:	f7ff ff01 	bl	8000480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4619      	mov	r1, r3
 800068a:	4822      	ldr	r0, [pc, #136]	; (8000714 <MX_TIM1_Init+0xfc>)
 800068c:	f001 fd3e 	bl	800210c <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000696:	f7ff fef3 	bl	8000480 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <MX_TIM1_Init+0xfc>)
 800069c:	f001 fa3c 	bl	8001b18 <HAL_TIM_IC_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006a6:	f7ff feeb 	bl	8000480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	4816      	ldr	r0, [pc, #88]	; (8000714 <MX_TIM1_Init+0xfc>)
 80006ba:	f002 f839 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80006c4:	f7ff fedc 	bl	8000480 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006cc:	2301      	movs	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_TIM1_Init+0xfc>)
 80006e0:	f001 fc80 	bl	8001fe4 <HAL_TIM_IC_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006ea:	f7ff fec9 	bl	8000480 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80006ee:	2302      	movs	r3, #2
 80006f0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80006f2:	2302      	movs	r3, #2
 80006f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006f6:	463b      	mov	r3, r7
 80006f8:	2204      	movs	r2, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM1_Init+0xfc>)
 80006fe:	f001 fc71 	bl	8001fe4 <HAL_TIM_IC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000708:	f7ff feba 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3728      	adds	r7, #40	; 0x28
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000108 	.word	0x20000108
 8000718:	40012c00 	.word	0x40012c00

0800071c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000738:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <MX_TIM3_Init+0x94>)
 800073a:	4a1e      	ldr	r2, [pc, #120]	; (80007b4 <MX_TIM3_Init+0x98>)
 800073c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 800073e:	4b1c      	ldr	r3, [pc, #112]	; (80007b0 <MX_TIM3_Init+0x94>)
 8000740:	2240      	movs	r2, #64	; 0x40
 8000742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_TIM3_Init+0x94>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800074a:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MX_TIM3_Init+0x94>)
 800074c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000750:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_TIM3_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_TIM3_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800075e:	4814      	ldr	r0, [pc, #80]	; (80007b0 <MX_TIM3_Init+0x94>)
 8000760:	f001 f940 	bl	80019e4 <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800076a:	f7ff fe89 	bl	8000480 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	4619      	mov	r1, r3
 800077a:	480d      	ldr	r0, [pc, #52]	; (80007b0 <MX_TIM3_Init+0x94>)
 800077c:	f001 fcc6 	bl	800210c <HAL_TIM_ConfigClockSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000786:	f7ff fe7b 	bl	8000480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4806      	ldr	r0, [pc, #24]	; (80007b0 <MX_TIM3_Init+0x94>)
 8000798:	f001 ffca 	bl	8002730 <HAL_TIMEx_MasterConfigSynchronization>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80007a2:	f7ff fe6d 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000c0 	.word	0x200000c0
 80007b4:	40000400 	.word	0x40000400

080007b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a27      	ldr	r2, [pc, #156]	; (8000870 <HAL_TIM_Base_MspInit+0xb8>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d12d      	bne.n	8000834 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007d8:	4b26      	ldr	r3, [pc, #152]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b23      	ldr	r3, [pc, #140]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b20      	ldr	r3, [pc, #128]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007f6:	f043 0304 	orr.w	r3, r3, #4
 80007fa:	6193      	str	r3, [r2, #24]
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8000808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0318 	add.w	r3, r7, #24
 800081a:	4619      	mov	r1, r3
 800081c:	4816      	ldr	r0, [pc, #88]	; (8000878 <HAL_TIM_Base_MspInit+0xc0>)
 800081e:	f000 fb09 	bl	8000e34 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2019      	movs	r0, #25
 8000828:	f000 fa1d 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800082c:	2019      	movs	r0, #25
 800082e:	f000 fa36 	bl	8000c9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000832:	e018      	b.n	8000866 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM3)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a10      	ldr	r2, [pc, #64]	; (800087c <HAL_TIM_Base_MspInit+0xc4>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d113      	bne.n	8000866 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_TIM_Base_MspInit+0xbc>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	201d      	movs	r0, #29
 800085c:	f000 fa03 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000860:	201d      	movs	r0, #29
 8000862:	f000 fa1c 	bl	8000c9e <HAL_NVIC_EnableIRQ>
}
 8000866:	bf00      	nop
 8000868:	3728      	adds	r7, #40	; 0x28
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40012c00 	.word	0x40012c00
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800
 800087c:	40000400 	.word	0x40000400

08000880 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART2_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800088c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART2_UART_Init+0x4c>)
 80008b8:	f001 ffaa 	bl	8002810 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f7ff fddd 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000150 	.word	0x20000150
 80008d0:	40004400 	.word	0x40004400

080008d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b088      	sub	sp, #32
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <HAL_UART_MspInit+0x80>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d12b      	bne.n	800094c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_UART_MspInit+0x84>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a17      	ldr	r2, [pc, #92]	; (8000958 <HAL_UART_MspInit+0x84>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fe:	61d3      	str	r3, [r2, #28]
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <HAL_UART_MspInit+0x84>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_UART_MspInit+0x84>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <HAL_UART_MspInit+0x84>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_UART_MspInit+0x84>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000924:	230c      	movs	r3, #12
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2302      	movs	r3, #2
 800092e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_UART_MspInit+0x88>)
 8000938:	f000 fa7c 	bl	8000e34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2026      	movs	r0, #38	; 0x26
 8000942:	f000 f990 	bl	8000c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000946:	2026      	movs	r0, #38	; 0x26
 8000948:	f000 f9a9 	bl	8000c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40004400 	.word	0x40004400
 8000958:	40021000 	.word	0x40021000
 800095c:	40010800 	.word	0x40010800

08000960 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000986:	f7ff fe41 	bl	800060c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098a:	f002 fc1f 	bl	80031cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f7ff fcbf 	bl	8000310 <main>
  bx lr
 8000992:	4770      	bx	lr
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800099c:	08003b28 	.word	0x08003b28
  ldr r2, =_sbss
 80009a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a4:	200001a8 	.word	0x200001a8

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b0:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <HAL_Init+0x28>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <HAL_Init+0x28>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009bc:	2003      	movs	r0, #3
 80009be:	f000 f947 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c2:	2000      	movs	r0, #0
 80009c4:	f000 f808 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c8:	f7ff fd60 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40022000 	.word	0x40022000

080009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <HAL_InitTick+0x54>)
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_InitTick+0x58>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	4619      	mov	r1, r3
 80009ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80009f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f95f 	bl	8000cba <HAL_SYSTICK_Config>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00e      	b.n	8000a24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d80a      	bhi.n	8000a22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f000 f927 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a18:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <HAL_InitTick+0x5c>)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e000      	b.n	8000a24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000004 	.word	0x20000004

08000a38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_IncTick+0x1c>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_IncTick+0x20>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_IncTick+0x20>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	20000008 	.word	0x20000008
 8000a58:	20000194 	.word	0x20000194

08000a5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a60:	4b02      	ldr	r3, [pc, #8]	; (8000a6c <HAL_GetTick+0x10>)
 8000a62:	681b      	ldr	r3, [r3, #0]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000194 	.word	0x20000194

08000a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a78:	f7ff fff0 	bl	8000a5c <HAL_GetTick>
 8000a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a88:	d005      	beq.n	8000a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_Delay+0x44>)
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a96:	bf00      	nop
 8000a98:	f7ff ffe0 	bl	8000a5c <HAL_GetTick>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d8f7      	bhi.n	8000a98 <HAL_Delay+0x28>
  {
  }
}
 8000aa8:	bf00      	nop
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000008 	.word	0x20000008

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4906      	ldr	r1, [pc, #24]	; (8000b50 <__NVIC_EnableIRQ+0x34>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff90 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff2d 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff42 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff35 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b085      	sub	sp, #20
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d008      	beq.n	8000cfa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2204      	movs	r2, #4
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e020      	b.n	8000d3c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f022 020e 	bic.w	r2, r2, #14
 8000d08:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0201 	bic.w	r2, r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d22:	2101      	movs	r1, #1
 8000d24:	fa01 f202 	lsl.w	r2, r1, r2
 8000d28:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
	...

08000d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d005      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2204      	movs	r2, #4
 8000d62:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
 8000d68:	e051      	b.n	8000e0e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 020e 	bic.w	r2, r2, #14
 8000d78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0201 	bic.w	r2, r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a22      	ldr	r2, [pc, #136]	; (8000e18 <HAL_DMA_Abort_IT+0xd0>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d029      	beq.n	8000de8 <HAL_DMA_Abort_IT+0xa0>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a20      	ldr	r2, [pc, #128]	; (8000e1c <HAL_DMA_Abort_IT+0xd4>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d022      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x9c>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1f      	ldr	r2, [pc, #124]	; (8000e20 <HAL_DMA_Abort_IT+0xd8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d01a      	beq.n	8000dde <HAL_DMA_Abort_IT+0x96>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a1d      	ldr	r2, [pc, #116]	; (8000e24 <HAL_DMA_Abort_IT+0xdc>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d012      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x90>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1c      	ldr	r2, [pc, #112]	; (8000e28 <HAL_DMA_Abort_IT+0xe0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d00a      	beq.n	8000dd2 <HAL_DMA_Abort_IT+0x8a>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1a      	ldr	r2, [pc, #104]	; (8000e2c <HAL_DMA_Abort_IT+0xe4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d102      	bne.n	8000dcc <HAL_DMA_Abort_IT+0x84>
 8000dc6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dca:	e00e      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dd0:	e00b      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	e008      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	e005      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000dde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de2:	e002      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000de4:	2310      	movs	r3, #16
 8000de6:	e000      	b.n	8000dea <HAL_DMA_Abort_IT+0xa2>
 8000de8:	2301      	movs	r3, #1
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <HAL_DMA_Abort_IT+0xe8>)
 8000dec:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d003      	beq.n	8000e0e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	4798      	blx	r3
    } 
  }
  return status;
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40020008 	.word	0x40020008
 8000e1c:	4002001c 	.word	0x4002001c
 8000e20:	40020030 	.word	0x40020030
 8000e24:	40020044 	.word	0x40020044
 8000e28:	40020058 	.word	0x40020058
 8000e2c:	4002006c 	.word	0x4002006c
 8000e30:	40020000 	.word	0x40020000

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b08b      	sub	sp, #44	; 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e169      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8158 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a9a      	ldr	r2, [pc, #616]	; (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d05e      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e70:	4a98      	ldr	r2, [pc, #608]	; (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d875      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e76:	4a98      	ldr	r2, [pc, #608]	; (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d058      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e7c:	4a96      	ldr	r2, [pc, #600]	; (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d86f      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e82:	4a96      	ldr	r2, [pc, #600]	; (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d052      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e88:	4a94      	ldr	r2, [pc, #592]	; (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d869      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a94      	ldr	r2, [pc, #592]	; (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d04c      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e94:	4a92      	ldr	r2, [pc, #584]	; (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d863      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a92      	ldr	r2, [pc, #584]	; (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d046      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000ea0:	4a90      	ldr	r2, [pc, #576]	; (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d85d      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d82a      	bhi.n	8000f00 <HAL_GPIO_Init+0xcc>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d859      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000eae:	a201      	add	r2, pc, #4	; (adr r2, 8000eb4 <HAL_GPIO_Init+0x80>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f09 	.word	0x08000f09
 8000ebc:	08000f1b 	.word	0x08000f1b
 8000ec0:	08000f5d 	.word	0x08000f5d
 8000ec4:	08000f63 	.word	0x08000f63
 8000ec8:	08000f63 	.word	0x08000f63
 8000ecc:	08000f63 	.word	0x08000f63
 8000ed0:	08000f63 	.word	0x08000f63
 8000ed4:	08000f63 	.word	0x08000f63
 8000ed8:	08000f63 	.word	0x08000f63
 8000edc:	08000f63 	.word	0x08000f63
 8000ee0:	08000f63 	.word	0x08000f63
 8000ee4:	08000f63 	.word	0x08000f63
 8000ee8:	08000f63 	.word	0x08000f63
 8000eec:	08000f63 	.word	0x08000f63
 8000ef0:	08000f63 	.word	0x08000f63
 8000ef4:	08000f63 	.word	0x08000f63
 8000ef8:	08000f11 	.word	0x08000f11
 8000efc:	08000f25 	.word	0x08000f25
 8000f00:	4a79      	ldr	r2, [pc, #484]	; (80010e8 <HAL_GPIO_Init+0x2b4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f06:	e02c      	b.n	8000f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e029      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e024      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e01f      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	330c      	adds	r3, #12
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e01a      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f36:	2304      	movs	r3, #4
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e013      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	611a      	str	r2, [r3, #16]
          break;
 8000f4e:	e009      	b.n	8000f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	615a      	str	r2, [r3, #20]
          break;
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          break;
 8000f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	; 0xff
 8000f68:	d801      	bhi.n	8000f6e <HAL_GPIO_Init+0x13a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	e001      	b.n	8000f72 <HAL_GPIO_Init+0x13e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2bff      	cmp	r3, #255	; 0xff
 8000f78:	d802      	bhi.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x152>
 8000f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f82:	3b08      	subs	r3, #8
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	6a39      	ldr	r1, [r7, #32]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80b1 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	; (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fcc:	4a48      	ldr	r2, [pc, #288]	; (80010f0 <HAL_GPIO_Init+0x2bc>)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a40      	ldr	r2, [pc, #256]	; (80010f4 <HAL_GPIO_Init+0x2c0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1ec>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3f      	ldr	r2, [pc, #252]	; (80010f8 <HAL_GPIO_Init+0x2c4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3e      	ldr	r2, [pc, #248]	; (80010fc <HAL_GPIO_Init+0x2c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3d      	ldr	r2, [pc, #244]	; (8001100 <HAL_GPIO_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1e0>
 8001010:	2303      	movs	r3, #3
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001014:	2304      	movs	r3, #4
 8001016:	e004      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001018:	2302      	movs	r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001020:	2300      	movs	r3, #0
 8001022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001024:	f002 0203 	and.w	r2, r2, #3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4093      	lsls	r3, r2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001032:	492f      	ldr	r1, [pc, #188]	; (80010f0 <HAL_GPIO_Init+0x2bc>)
 8001034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	492c      	ldr	r1, [pc, #176]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	600b      	str	r3, [r1, #0]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800105a:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4928      	ldr	r1, [pc, #160]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4922      	ldr	r1, [pc, #136]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	604b      	str	r3, [r1, #4]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	491e      	ldr	r1, [pc, #120]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	4918      	ldr	r1, [pc, #96]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4914      	ldr	r1, [pc, #80]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d021      	beq.n	8001108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	490e      	ldr	r1, [pc, #56]	; (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e021      	b.n	8001116 <HAL_GPIO_Init+0x2e2>
 80010d2:	bf00      	nop
 80010d4:	10320000 	.word	0x10320000
 80010d8:	10310000 	.word	0x10310000
 80010dc:	10220000 	.word	0x10220000
 80010e0:	10210000 	.word	0x10210000
 80010e4:	10120000 	.word	0x10120000
 80010e8:	10110000 	.word	0x10110000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40010800 	.word	0x40010800
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40011000 	.word	0x40011000
 8001100:	40011400 	.word	0x40011400
 8001104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_GPIO_Init+0x304>)
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	4909      	ldr	r1, [pc, #36]	; (8001138 <HAL_GPIO_Init+0x304>)
 8001112:	4013      	ands	r3, r2
 8001114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001118:	3301      	adds	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f ae8e 	bne.w	8000e48 <HAL_GPIO_Init+0x14>
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	372c      	adds	r7, #44	; 0x2c
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	611a      	str	r2, [r3, #16]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f806 	bl	800119c <HAL_GPIO_EXTI_Callback>
  }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e26c      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d0:	4b92      	ldr	r3, [pc, #584]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d00c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011dc:	4b8f      	ldr	r3, [pc, #572]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d112      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
 80011e8:	4b8c      	ldr	r3, [pc, #560]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b89      	ldr	r3, [pc, #548]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06c      	beq.n	80012dc <HAL_RCC_OscConfig+0x12c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d168      	bne.n	80012dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e246      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x76>
 8001218:	4b80      	ldr	r3, [pc, #512]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a7f      	ldr	r2, [pc, #508]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e02e      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b7b      	ldr	r3, [pc, #492]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7a      	ldr	r2, [pc, #488]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b78      	ldr	r3, [pc, #480]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a77      	ldr	r2, [pc, #476]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0xbc>
 8001252:	4b72      	ldr	r3, [pc, #456]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a71      	ldr	r2, [pc, #452]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6e      	ldr	r2, [pc, #440]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 800126c:	4b6b      	ldr	r3, [pc, #428]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a6a      	ldr	r2, [pc, #424]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b68      	ldr	r3, [pc, #416]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a67      	ldr	r2, [pc, #412]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fbe6 	bl	8000a5c <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fbe2 	bl	8000a5c <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e1fa      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xe4>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fbd2 	bl	8000a5c <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fbce 	bl	8000a5c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1e6      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x10c>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012f6:	4b49      	ldr	r3, [pc, #292]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
 8001302:	4b46      	ldr	r3, [pc, #280]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b43      	ldr	r3, [pc, #268]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1ba      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3d      	ldr	r3, [pc, #244]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4939      	ldr	r1, [pc, #228]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b36      	ldr	r3, [pc, #216]	; (8001420 <HAL_RCC_OscConfig+0x270>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb87 	bl	8000a5c <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fb83 	bl	8000a5c <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e19b      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4927      	ldr	r1, [pc, #156]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_RCC_OscConfig+0x270>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb66 	bl	8000a5c <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fb62 	bl	8000a5c <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e17a      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03a      	beq.n	8001434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d019      	beq.n	80013fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fb46 	bl	8000a5c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fb42 	bl	8000a5c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e15a      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 fad8 	bl	80019a8 <RCC_Delay>
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fb2c 	bl	8000a5c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001406:	e00f      	b.n	8001428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb28 	bl	8000a5c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d908      	bls.n	8001428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e140      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	42420000 	.word	0x42420000
 8001424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b9e      	ldr	r3, [pc, #632]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e9      	bne.n	8001408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a6 	beq.w	800158e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b97      	ldr	r3, [pc, #604]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b94      	ldr	r3, [pc, #592]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a93      	ldr	r2, [pc, #588]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b91      	ldr	r3, [pc, #580]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b8e      	ldr	r3, [pc, #568]	; (80016a8 <HAL_RCC_OscConfig+0x4f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b8b      	ldr	r3, [pc, #556]	; (80016a8 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a8a      	ldr	r2, [pc, #552]	; (80016a8 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fae9 	bl	8000a5c <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fae5 	bl	8000a5c <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b64      	cmp	r3, #100	; 0x64
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0fd      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x4f8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x312>
 80014b4:	4b7b      	ldr	r3, [pc, #492]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a7a      	ldr	r2, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e02d      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x334>
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a75      	ldr	r2, [pc, #468]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	e01c      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x356>
 80014ec:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a69      	ldr	r2, [pc, #420]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a66      	ldr	r2, [pc, #408]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fa99 	bl	8000a5c <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fa95 	bl	8000a5c <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	; 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0ab      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	4b57      	ldr	r3, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ee      	beq.n	800152e <HAL_RCC_OscConfig+0x37e>
 8001550:	e014      	b.n	800157c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fa83 	bl	8000a5c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fa7f 	bl	8000a5c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e095      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	4b4c      	ldr	r3, [pc, #304]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8081 	beq.w	800169a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001598:	4b42      	ldr	r3, [pc, #264]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d061      	beq.n	8001668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d146      	bne.n	800163a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <HAL_RCC_OscConfig+0x4fc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fa53 	bl	8000a5c <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fa4f 	bl	8000a5c <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e067      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e2:	4b30      	ldr	r3, [pc, #192]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	492d      	ldr	r1, [pc, #180]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b2b      	ldr	r3, [pc, #172]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a19      	ldr	r1, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	430b      	orrs	r3, r1
 8001606:	4927      	ldr	r1, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x4fc>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fa23 	bl	8000a5c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff fa1f 	bl	8000a5c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e037      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x46a>
 8001638:	e02f      	b.n	800169a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_RCC_OscConfig+0x4fc>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fa0c 	bl	8000a5c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fa08 	bl	8000a5c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e020      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x498>
 8001666:	e018      	b.n	800169a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e013      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001674:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	429a      	cmp	r2, r3
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	429a      	cmp	r2, r3
 8001694:	d001      	beq.n	800169a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42420060 	.word	0x42420060

080016b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0d0      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c4:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d910      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b67      	ldr	r3, [pc, #412]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0207 	bic.w	r2, r3, #7
 80016da:	4965      	ldr	r1, [pc, #404]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0b8      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0302 	and.w	r3, r3, #2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d020      	beq.n	8001742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800170c:	4b59      	ldr	r3, [pc, #356]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4a58      	ldr	r2, [pc, #352]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001724:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4a52      	ldr	r2, [pc, #328]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800172e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001730:	4b50      	ldr	r3, [pc, #320]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	494d      	ldr	r1, [pc, #308]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	4313      	orrs	r3, r2
 8001740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d040      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d115      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e07f      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176e:	4b41      	ldr	r3, [pc, #260]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e073      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06b      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4936      	ldr	r1, [pc, #216]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff f95c 	bl	8000a5c <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	e00a      	b.n	80017be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a8:	f7ff f958 	bl	8000a5c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e053      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 020c 	and.w	r2, r3, #12
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d1eb      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d210      	bcs.n	8001800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 0207 	bic.w	r2, r3, #7
 80017e6:	4922      	ldr	r1, [pc, #136]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d001      	beq.n	8001800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e032      	b.n	8001866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4916      	ldr	r1, [pc, #88]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	490e      	ldr	r1, [pc, #56]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	4313      	orrs	r3, r2
 800183c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800183e:	f000 f821 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001842:	4602      	mov	r2, r0
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_ClockConfig+0x1c4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	091b      	lsrs	r3, r3, #4
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	490a      	ldr	r1, [pc, #40]	; (8001878 <HAL_RCC_ClockConfig+0x1c8>)
 8001850:	5ccb      	ldrb	r3, [r1, r3]
 8001852:	fa22 f303 	lsr.w	r3, r2, r3
 8001856:	4a09      	ldr	r2, [pc, #36]	; (800187c <HAL_RCC_ClockConfig+0x1cc>)
 8001858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <HAL_RCC_ClockConfig+0x1d0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f8ba 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000
 8001874:	40021000 	.word	0x40021000
 8001878:	08003ad4 	.word	0x08003ad4
 800187c:	20000000 	.word	0x20000000
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b490      	push	{r4, r7}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_GetSysClockFreq+0xb0>)
 800188c:	1d3c      	adds	r4, r7, #4
 800188e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001894:	f240 2301 	movw	r3, #513	; 0x201
 8001898:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
 80018a2:	2300      	movs	r3, #0
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 030c 	and.w	r3, r3, #12
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x40>
 80018be:	2b08      	cmp	r3, #8
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x46>
 80018c2:	e02d      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCC_GetSysClockFreq+0xb8>)
 80018c6:	623b      	str	r3, [r7, #32]
      break;
 80018c8:	e02d      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	0c9b      	lsrs	r3, r3, #18
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018d6:	4413      	add	r3, r2
 80018d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	0c5b      	lsrs	r3, r3, #17
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018f6:	4413      	add	r3, r2
 80018f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001902:	fb02 f203 	mul.w	r2, r2, r3
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	e004      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	623b      	str	r3, [r7, #32]
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001922:	623b      	str	r3, [r7, #32]
      break;
 8001924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001926:	6a3b      	ldr	r3, [r7, #32]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3728      	adds	r7, #40	; 0x28
 800192c:	46bd      	mov	sp, r7
 800192e:	bc90      	pop	{r4, r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	08003ac4 	.word	0x08003ac4
 8001938:	40021000 	.word	0x40021000
 800193c:	007a1200 	.word	0x007a1200
 8001940:	003d0900 	.word	0x003d0900

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_RCC_GetHCLKFreq+0x10>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	20000000 	.word	0x20000000

08001958 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800195c:	f7ff fff2 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK1Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	08003ae4 	.word	0x08003ae4

08001980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001984:	f7ff ffde 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001988:	4602      	mov	r2, r0
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	0adb      	lsrs	r3, r3, #11
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	4903      	ldr	r1, [pc, #12]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001996:	5ccb      	ldrb	r3, [r1, r3]
 8001998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40021000 	.word	0x40021000
 80019a4:	08003ae4 	.word	0x08003ae4

080019a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <RCC_Delay+0x34>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <RCC_Delay+0x38>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a5b      	lsrs	r3, r3, #9
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	fb02 f303 	mul.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019c4:	bf00      	nop
  }
  while (Delay --);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	60fa      	str	r2, [r7, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1f9      	bne.n	80019c4 <RCC_Delay+0x1c>
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000
 80019e0:	10624dd3 	.word	0x10624dd3

080019e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e041      	b.n	8001a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7fe fed4 	bl	80007b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 fc5a 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d001      	beq.n	8001a9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e032      	b.n	8001b02 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a18      	ldr	r2, [pc, #96]	; (8001b0c <HAL_TIM_Base_Start+0x88>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00e      	beq.n	8001acc <HAL_TIM_Base_Start+0x48>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab6:	d009      	beq.n	8001acc <HAL_TIM_Base_Start+0x48>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_TIM_Base_Start+0x8c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d004      	beq.n	8001acc <HAL_TIM_Base_Start+0x48>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <HAL_TIM_Base_Start+0x90>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d111      	bne.n	8001af0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d010      	beq.n	8001b00 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aee:	e007      	b.n	8001b00 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40012c00 	.word	0x40012c00
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800

08001b18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e041      	b.n	8001bae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d106      	bne.n	8001b44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f839 	bl	8001bb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2202      	movs	r2, #2
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3304      	adds	r3, #4
 8001b54:	4619      	mov	r1, r3
 8001b56:	4610      	mov	r0, r2
 8001b58:	f000 fbc0 	bl	80022dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <HAL_TIM_IC_Start_IT+0x1a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	e013      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x42>
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d104      	bne.n	8001bf2 <HAL_TIM_IC_Start_IT+0x2a>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	e00b      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x42>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d104      	bne.n	8001c02 <HAL_TIM_IC_Start_IT+0x3a>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	e003      	b.n	8001c0a <HAL_TIM_IC_Start_IT+0x42>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d104      	bne.n	8001c1c <HAL_TIM_IC_Start_IT+0x54>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	e013      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x7c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d104      	bne.n	8001c2c <HAL_TIM_IC_Start_IT+0x64>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e00b      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x7c>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d104      	bne.n	8001c3c <HAL_TIM_IC_Start_IT+0x74>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e003      	b.n	8001c44 <HAL_TIM_IC_Start_IT+0x7c>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d102      	bne.n	8001c52 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001c4c:	7bbb      	ldrb	r3, [r7, #14]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0b3      	b.n	8001dbe <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <HAL_TIM_IC_Start_IT+0x9e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c64:	e013      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xc6>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_IC_Start_IT+0xae>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c74:	e00b      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xc6>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_IC_Start_IT+0xbe>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c84:	e003      	b.n	8001c8e <HAL_TIM_IC_Start_IT+0xc6>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_TIM_IC_Start_IT+0xd6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c9c:	e013      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0xfe>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d104      	bne.n	8001cae <HAL_TIM_IC_Start_IT+0xe6>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cac:	e00b      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0xfe>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d104      	bne.n	8001cbe <HAL_TIM_IC_Start_IT+0xf6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cbc:	e003      	b.n	8001cc6 <HAL_TIM_IC_Start_IT+0xfe>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b0c      	cmp	r3, #12
 8001cca:	d841      	bhi.n	8001d50 <HAL_TIM_IC_Start_IT+0x188>
 8001ccc:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <HAL_TIM_IC_Start_IT+0x10c>)
 8001cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd2:	bf00      	nop
 8001cd4:	08001d09 	.word	0x08001d09
 8001cd8:	08001d51 	.word	0x08001d51
 8001cdc:	08001d51 	.word	0x08001d51
 8001ce0:	08001d51 	.word	0x08001d51
 8001ce4:	08001d1b 	.word	0x08001d1b
 8001ce8:	08001d51 	.word	0x08001d51
 8001cec:	08001d51 	.word	0x08001d51
 8001cf0:	08001d51 	.word	0x08001d51
 8001cf4:	08001d2d 	.word	0x08001d2d
 8001cf8:	08001d51 	.word	0x08001d51
 8001cfc:	08001d51 	.word	0x08001d51
 8001d00:	08001d51 	.word	0x08001d51
 8001d04:	08001d3f 	.word	0x08001d3f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0202 	orr.w	r2, r2, #2
 8001d16:	60da      	str	r2, [r3, #12]
      break;
 8001d18:	e01b      	b.n	8001d52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68da      	ldr	r2, [r3, #12]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 0204 	orr.w	r2, r2, #4
 8001d28:	60da      	str	r2, [r3, #12]
      break;
 8001d2a:	e012      	b.n	8001d52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0208 	orr.w	r2, r2, #8
 8001d3a:	60da      	str	r2, [r3, #12]
      break;
 8001d3c:	e009      	b.n	8001d52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0210 	orr.w	r2, r2, #16
 8001d4c:	60da      	str	r2, [r3, #12]
      break;
 8001d4e:	e000      	b.n	8001d52 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8001d50:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2201      	movs	r2, #1
 8001d58:	6839      	ldr	r1, [r7, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fcc3 	bl	80026e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_TIM_IC_Start_IT+0x200>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d72:	d009      	beq.n	8001d88 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_TIM_IC_Start_IT+0x204>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_TIM_IC_Start_IT+0x1c0>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <HAL_TIM_IC_Start_IT+0x208>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d010      	beq.n	8001dbc <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	e007      	b.n	8001dbc <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800

08001dd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0202 	mvn.w	r2, #2
 8001e00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe faf8 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa41 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 fa47 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0204 	mvn.w	r2, #4
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7fe face 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fa17 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fa1d 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0208 	mvn.w	r2, #8
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2204      	movs	r2, #4
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7fe faa4 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f9ed 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9f3 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b10      	cmp	r3, #16
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0210 	mvn.w	r2, #16
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2208      	movs	r2, #8
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7fe fa7a 	bl	800040c <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f9c3 	bl	80022a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f9c9 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10e      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d107      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0201 	mvn.w	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f99e 	bl	8002294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f62:	2b80      	cmp	r3, #128	; 0x80
 8001f64:	d10e      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	2b80      	cmp	r3, #128	; 0x80
 8001f72:	d107      	bne.n	8001f84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 fc3d 	bl	80027fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	d10e      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	2b40      	cmp	r3, #64	; 0x40
 8001f9e:	d107      	bne.n	8001fb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f98d 	bl	80022ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	f003 0320 	and.w	r3, r3, #32
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d10e      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b20      	cmp	r3, #32
 8001fca:	d107      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0220 	mvn.w	r2, #32
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fc08 	bl	80027ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_IC_ConfigChannel+0x1a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e082      	b.n	8002104 <HAL_TIM_IC_ConfigChannel+0x120>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6819      	ldr	r1, [r3, #0]
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f000 f9c0 	bl	80023a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699a      	ldr	r2, [r3, #24]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f022 020c 	bic.w	r2, r2, #12
 800202e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6999      	ldr	r1, [r3, #24]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	619a      	str	r2, [r3, #24]
 8002042:	e05a      	b.n	80020fa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b04      	cmp	r3, #4
 8002048:	d11c      	bne.n	8002084 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f000 fa29 	bl	80024b0 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800206c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6999      	ldr	r1, [r3, #24]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	021a      	lsls	r2, r3, #8
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	619a      	str	r2, [r3, #24]
 8002082:	e03a      	b.n	80020fa <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d11b      	bne.n	80020c2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f000 fa74 	bl	8002586 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 020c 	bic.w	r2, r2, #12
 80020ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	69d9      	ldr	r1, [r3, #28]
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	61da      	str	r2, [r3, #28]
 80020c0:	e01b      	b.n	80020fa <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f000 fa93 	bl	80025fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69da      	ldr	r2, [r3, #28]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020e4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69d9      	ldr	r1, [r3, #28]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	021a      	lsls	r2, r3, #8
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_TIM_ConfigClockSource+0x18>
 8002120:	2302      	movs	r3, #2
 8002122:	e0b3      	b.n	800228c <HAL_TIM_ConfigClockSource+0x180>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002142:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215c:	d03e      	beq.n	80021dc <HAL_TIM_ConfigClockSource+0xd0>
 800215e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002162:	f200 8087 	bhi.w	8002274 <HAL_TIM_ConfigClockSource+0x168>
 8002166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216a:	f000 8085 	beq.w	8002278 <HAL_TIM_ConfigClockSource+0x16c>
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d87f      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 8002174:	2b70      	cmp	r3, #112	; 0x70
 8002176:	d01a      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0xa2>
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d87b      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 800217c:	2b60      	cmp	r3, #96	; 0x60
 800217e:	d050      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0x116>
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d877      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 8002184:	2b50      	cmp	r3, #80	; 0x50
 8002186:	d03c      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xf6>
 8002188:	2b50      	cmp	r3, #80	; 0x50
 800218a:	d873      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d058      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0x136>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d86f      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 8002194:	2b30      	cmp	r3, #48	; 0x30
 8002196:	d064      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x156>
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d86b      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 800219c:	2b20      	cmp	r3, #32
 800219e:	d060      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x156>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d867      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05c      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x156>
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d05a      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021ac:	e062      	b.n	8002274 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f000 fa73 	bl	80026a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	609a      	str	r2, [r3, #8]
      break;
 80021da:	e04e      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f000 fa5c 	bl	80026a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021fe:	609a      	str	r2, [r3, #8]
      break;
 8002200:	e03b      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	461a      	mov	r2, r3
 8002210:	f000 f920 	bl	8002454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2150      	movs	r1, #80	; 0x50
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fa2a 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002220:	e02b      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	461a      	mov	r2, r3
 8002230:	f000 f97a 	bl	8002528 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2160      	movs	r1, #96	; 0x60
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa1a 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002240:	e01b      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	461a      	mov	r2, r3
 8002250:	f000 f900 	bl	8002454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2140      	movs	r1, #64	; 0x40
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fa0a 	bl	8002674 <TIM_ITRx_SetConfig>
      break;
 8002260:	e00b      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f000 fa01 	bl	8002674 <TIM_ITRx_SetConfig>
        break;
 8002272:	e002      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002274:	bf00      	nop
 8002276:	e000      	b.n	800227a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002278:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a29      	ldr	r2, [pc, #164]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00b      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022fa:	d007      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a26      	ldr	r2, [pc, #152]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d003      	beq.n	800230c <TIM_Base_SetConfig+0x30>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a25      	ldr	r2, [pc, #148]	; (800239c <TIM_Base_SetConfig+0xc0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d108      	bne.n	800231e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a1c      	ldr	r2, [pc, #112]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d00b      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800232c:	d007      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a19      	ldr	r2, [pc, #100]	; (8002398 <TIM_Base_SetConfig+0xbc>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d003      	beq.n	800233e <TIM_Base_SetConfig+0x62>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <TIM_Base_SetConfig+0xc0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d108      	bne.n	8002350 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a07      	ldr	r2, [pc, #28]	; (8002394 <TIM_Base_SetConfig+0xb8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d103      	bne.n	8002384 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	615a      	str	r2, [r3, #20]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800

080023a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b087      	sub	sp, #28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
 80023ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	f023 0201 	bic.w	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a1f      	ldr	r2, [pc, #124]	; (8002448 <TIM_TI1_SetConfig+0xa8>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_TI1_SetConfig+0x46>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023d4:	d007      	beq.n	80023e6 <TIM_TI1_SetConfig+0x46>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a1c      	ldr	r2, [pc, #112]	; (800244c <TIM_TI1_SetConfig+0xac>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_TI1_SetConfig+0x46>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a1b      	ldr	r2, [pc, #108]	; (8002450 <TIM_TI1_SetConfig+0xb0>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d101      	bne.n	80023ea <TIM_TI1_SetConfig+0x4a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <TIM_TI1_SetConfig+0x4c>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
 8002400:	e003      	b.n	800240a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002410:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	b2db      	uxtb	r3, r3
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f023 030a 	bic.w	r3, r3, #10
 8002424:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f003 030a 	and.w	r3, r3, #10
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	621a      	str	r2, [r3, #32]
}
 800243e:	bf00      	nop
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40000400 	.word	0x40000400
 8002450:	40000800 	.word	0x40000800

08002454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	f023 0201 	bic.w	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f023 030a 	bic.w	r3, r3, #10
 8002490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	621a      	str	r2, [r3, #32]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	f023 0210 	bic.w	r2, r3, #16
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	031b      	lsls	r3, r3, #12
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002502:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	621a      	str	r2, [r3, #32]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 0210 	bic.w	r2, r3, #16
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002552:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	031b      	lsls	r3, r3, #12
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002564:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	621a      	str	r2, [r3, #32]
}
 800257c:	bf00      	nop
 800257e:	371c      	adds	r7, #28
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002586:	b480      	push	{r7}
 8002588:	b087      	sub	sp, #28
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	607a      	str	r2, [r7, #4]
 8002592:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f023 0303 	bic.w	r3, r3, #3
 80025b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	697a      	ldr	r2, [r7, #20]
 80025ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	621a      	str	r2, [r3, #32]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002628:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800263a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	031b      	lsls	r3, r3, #12
 8002640:	b29b      	uxth	r3, r3
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800264e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	621a      	str	r2, [r3, #32]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4313      	orrs	r3, r2
 8002692:	f043 0307 	orr.w	r3, r3, #7
 8002696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	021a      	lsls	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	371c      	adds	r7, #28
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr

080026e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b087      	sub	sp, #28
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	2201      	movs	r2, #1
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6a1a      	ldr	r2, [r3, #32]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	43db      	mvns	r3, r3
 8002708:	401a      	ands	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a1a      	ldr	r2, [r3, #32]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f003 031f 	and.w	r3, r3, #31
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	431a      	orrs	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	621a      	str	r2, [r3, #32]
}
 8002724:	bf00      	nop
 8002726:	371c      	adds	r7, #28
 8002728:	46bd      	mov	sp, r7
 800272a:	bc80      	pop	{r7}
 800272c:	4770      	bx	lr
	...

08002730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002744:	2302      	movs	r3, #2
 8002746:	e046      	b.n	80027d6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4313      	orrs	r3, r2
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00e      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d009      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d10c      	bne.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	40012c00 	.word	0x40012c00
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800

080027ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e03f      	b.n	80028a2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d106      	bne.n	800283c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7fe f84c 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2224      	movs	r2, #36	; 0x24
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fc25 	bl	80030a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b08a      	sub	sp, #40	; 0x28
 80028ae:	af02      	add	r7, sp, #8
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	603b      	str	r3, [r7, #0]
 80028b6:	4613      	mov	r3, r2
 80028b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b20      	cmp	r3, #32
 80028c8:	d17c      	bne.n	80029c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_UART_Transmit+0x2c>
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e075      	b.n	80029c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Transmit+0x3e>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e06e      	b.n	80029c6 <HAL_UART_Transmit+0x11c>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2221      	movs	r2, #33	; 0x21
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028fe:	f7fe f8ad 	bl	8000a5c <HAL_GetTick>
 8002902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	88fa      	ldrh	r2, [r7, #6]
 8002908:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d108      	bne.n	800292c <HAL_UART_Transmit+0x82>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d104      	bne.n	800292c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	61bb      	str	r3, [r7, #24]
 800292a:	e003      	b.n	8002934 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800293c:	e02a      	b.n	8002994 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	2180      	movs	r1, #128	; 0x80
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fa11 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e036      	b.n	80029c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800296c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	3302      	adds	r3, #2
 8002972:	61bb      	str	r3, [r7, #24]
 8002974:	e007      	b.n	8002986 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	3301      	adds	r3, #1
 8002984:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002998:	b29b      	uxth	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1cf      	bne.n	800293e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2140      	movs	r1, #64	; 0x40
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f9e1 	bl	8002d70 <UART_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e006      	b.n	80029c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029c4:	2302      	movs	r3, #2
  }
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_UART_IRQHandler+0x52>
 8002a10:	6a3b      	ldr	r3, [r7, #32]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fa99 	bl	8002f52 <UART_Receive_IT>
      return;
 8002a20:	e17b      	b.n	8002d1a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80b1 	beq.w	8002b8c <HAL_UART_IRQHandler+0x1bc>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d105      	bne.n	8002a40 <HAL_UART_IRQHandler+0x70>
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80a6 	beq.w	8002b8c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_UART_IRQHandler+0x90>
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f043 0201 	orr.w	r2, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_UART_IRQHandler+0xb0>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0202 	orr.w	r2, r3, #2
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xd0>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f043 0204 	orr.w	r2, r3, #4
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00f      	beq.n	8002aca <HAL_UART_IRQHandler+0xfa>
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d104      	bne.n	8002abe <HAL_UART_IRQHandler+0xee>
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0208 	orr.w	r2, r3, #8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 811e 	beq.w	8002d10 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_UART_IRQHandler+0x11e>
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fa32 	bl	8002f52 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_UART_IRQHandler+0x146>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d031      	beq.n	8002b7a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f974 	bl	8002e04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d023      	beq.n	8002b72 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b38:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b46:	4a76      	ldr	r2, [pc, #472]	; (8002d20 <HAL_UART_IRQHandler+0x350>)
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f8fa 	bl	8000d48 <HAL_DMA_Abort_IT>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b64:	4610      	mov	r0, r2
 8002b66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	e00e      	b.n	8002b88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8ec 	bl	8002d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00a      	b.n	8002b88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8e8 	bl	8002d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e006      	b.n	8002b88 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8e4 	bl	8002d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b86:	e0c3      	b.n	8002d10 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	bf00      	nop
    return;
 8002b8a:	e0c1      	b.n	8002d10 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	f040 80a1 	bne.w	8002cd8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 809b 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8095 	beq.w	8002cd8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d04e      	beq.n	8002c70 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002bdc:	8a3b      	ldrh	r3, [r7, #16]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8098 	beq.w	8002d14 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be8:	8a3a      	ldrh	r2, [r7, #16]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	f080 8092 	bcs.w	8002d14 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	8a3a      	ldrh	r2, [r7, #16]
 8002bf4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d02b      	beq.n	8002c58 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c0e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0210 	bic.w	r2, r2, #16
 8002c4c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe f83d 	bl	8000cd2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	4619      	mov	r1, r3
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f876 	bl	8002d5a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002c6e:	e051      	b.n	8002d14 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d047      	beq.n	8002d18 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d044      	beq.n	8002d18 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c9c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695a      	ldr	r2, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0210 	bic.w	r2, r2, #16
 8002cca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ccc:	8a7b      	ldrh	r3, [r7, #18]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f000 f842 	bl	8002d5a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002cd6:	e01f      	b.n	8002d18 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x324>
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f8c9 	bl	8002e84 <UART_Transmit_IT>
    return;
 8002cf2:	e012      	b.n	8002d1a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <HAL_UART_IRQHandler+0x34a>
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f90a 	bl	8002f22 <UART_EndTransmit_IT>
    return;
 8002d0e:	e004      	b.n	8002d1a <HAL_UART_IRQHandler+0x34a>
    return;
 8002d10:	bf00      	nop
 8002d12:	e002      	b.n	8002d1a <HAL_UART_IRQHandler+0x34a>
      return;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <HAL_UART_IRQHandler+0x34a>
      return;
 8002d18:	bf00      	nop
  }
}
 8002d1a:	3728      	adds	r7, #40	; 0x28
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	08002e5d 	.word	0x08002e5d

08002d24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr

08002d36 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr

08002d48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d80:	e02c      	b.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d88:	d028      	beq.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d90:	f7fd fe64 	bl	8000a5c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d21d      	bcs.n	8002ddc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0201 	bic.w	r2, r2, #1
 8002dbe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e00f      	b.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4013      	ands	r3, r2
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	bf0c      	ite	eq
 8002dec:	2301      	moveq	r3, #1
 8002dee:	2300      	movne	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d0c3      	beq.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e1a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0210 	bic.w	r2, r2, #16
 8002e42:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff ff66 	bl	8002d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b21      	cmp	r3, #33	; 0x21
 8002e96:	d13e      	bne.n	8002f16 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea0:	d114      	bne.n	8002ecc <UART_Transmit_IT+0x48>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d110      	bne.n	8002ecc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ebe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	621a      	str	r2, [r3, #32]
 8002eca:	e008      	b.n	8002ede <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6211      	str	r1, [r2, #32]
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4619      	mov	r1, r3
 8002eec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10f      	bne.n	8002f12 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f00:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68da      	ldr	r2, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f10:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f38:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff feee 	bl	8002d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b22      	cmp	r3, #34	; 0x22
 8002f64:	f040 8099 	bne.w	800309a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f70:	d117      	bne.n	8002fa2 <UART_Receive_IT+0x50>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d113      	bne.n	8002fa2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	1c9a      	adds	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa0:	e026      	b.n	8002ff0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d007      	beq.n	8002fc6 <UART_Receive_IT+0x74>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10a      	bne.n	8002fd4 <UART_Receive_IT+0x82>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	701a      	strb	r2, [r3, #0]
 8002fd2:	e008      	b.n	8002fe6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	1c5a      	adds	r2, r3, #1
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003000:	2b00      	cmp	r3, #0
 8003002:	d148      	bne.n	8003096 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0220 	bic.w	r2, r2, #32
 8003012:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003022:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695a      	ldr	r2, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	d123      	bne.n	800308c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0210 	bic.w	r2, r2, #16
 8003058:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d10a      	bne.n	800307e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003082:	4619      	mov	r1, r3
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f7ff fe68 	bl	8002d5a <HAL_UARTEx_RxEventCallback>
 800308a:	e002      	b.n	8003092 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff fe52 	bl	8002d36 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003092:	2300      	movs	r3, #0
 8003094:	e002      	b.n	800309c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800309a:	2302      	movs	r3, #2
  }
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80030de:	f023 030c 	bic.w	r3, r3, #12
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	430b      	orrs	r3, r1
 80030ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <UART_SetConfig+0x114>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d103      	bne.n	8003114 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7fe fc38 	bl	8001980 <HAL_RCC_GetPCLK2Freq>
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	e002      	b.n	800311a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7fe fc20 	bl	8001958 <HAL_RCC_GetPCLK1Freq>
 8003118:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009a      	lsls	r2, r3, #2
 8003124:	441a      	add	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <UART_SetConfig+0x118>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	0119      	lsls	r1, r3, #4
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4613      	mov	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4413      	add	r3, r2
 8003142:	009a      	lsls	r2, r3, #2
 8003144:	441a      	add	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <UART_SetConfig+0x118>)
 8003152:	fba3 0302 	umull	r0, r3, r3, r2
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2064      	movs	r0, #100	; 0x64
 800315a:	fb00 f303 	mul.w	r3, r0, r3
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	3332      	adds	r3, #50	; 0x32
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <UART_SetConfig+0x118>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003170:	4419      	add	r1, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009a      	lsls	r2, r3, #2
 800317c:	441a      	add	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fbb2 f2f3 	udiv	r2, r2, r3
 8003188:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <UART_SetConfig+0x118>)
 800318a:	fba3 0302 	umull	r0, r3, r3, r2
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2064      	movs	r0, #100	; 0x64
 8003192:	fb00 f303 	mul.w	r3, r0, r3
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	3332      	adds	r3, #50	; 0x32
 800319c:	4a07      	ldr	r2, [pc, #28]	; (80031bc <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	f003 020f 	and.w	r2, r3, #15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	440a      	add	r2, r1
 80031ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40013800 	.word	0x40013800
 80031bc:	51eb851f 	.word	0x51eb851f

080031c0 <__errno>:
 80031c0:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <__errno+0x8>)
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c

080031cc <__libc_init_array>:
 80031cc:	b570      	push	{r4, r5, r6, lr}
 80031ce:	2600      	movs	r6, #0
 80031d0:	4d0c      	ldr	r5, [pc, #48]	; (8003204 <__libc_init_array+0x38>)
 80031d2:	4c0d      	ldr	r4, [pc, #52]	; (8003208 <__libc_init_array+0x3c>)
 80031d4:	1b64      	subs	r4, r4, r5
 80031d6:	10a4      	asrs	r4, r4, #2
 80031d8:	42a6      	cmp	r6, r4
 80031da:	d109      	bne.n	80031f0 <__libc_init_array+0x24>
 80031dc:	f000 fc5c 	bl	8003a98 <_init>
 80031e0:	2600      	movs	r6, #0
 80031e2:	4d0a      	ldr	r5, [pc, #40]	; (800320c <__libc_init_array+0x40>)
 80031e4:	4c0a      	ldr	r4, [pc, #40]	; (8003210 <__libc_init_array+0x44>)
 80031e6:	1b64      	subs	r4, r4, r5
 80031e8:	10a4      	asrs	r4, r4, #2
 80031ea:	42a6      	cmp	r6, r4
 80031ec:	d105      	bne.n	80031fa <__libc_init_array+0x2e>
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f4:	4798      	blx	r3
 80031f6:	3601      	adds	r6, #1
 80031f8:	e7ee      	b.n	80031d8 <__libc_init_array+0xc>
 80031fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80031fe:	4798      	blx	r3
 8003200:	3601      	adds	r6, #1
 8003202:	e7f2      	b.n	80031ea <__libc_init_array+0x1e>
 8003204:	08003b20 	.word	0x08003b20
 8003208:	08003b20 	.word	0x08003b20
 800320c:	08003b20 	.word	0x08003b20
 8003210:	08003b24 	.word	0x08003b24

08003214 <memset>:
 8003214:	4603      	mov	r3, r0
 8003216:	4402      	add	r2, r0
 8003218:	4293      	cmp	r3, r2
 800321a:	d100      	bne.n	800321e <memset+0xa>
 800321c:	4770      	bx	lr
 800321e:	f803 1b01 	strb.w	r1, [r3], #1
 8003222:	e7f9      	b.n	8003218 <memset+0x4>

08003224 <siprintf>:
 8003224:	b40e      	push	{r1, r2, r3}
 8003226:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800322a:	b500      	push	{lr}
 800322c:	b09c      	sub	sp, #112	; 0x70
 800322e:	ab1d      	add	r3, sp, #116	; 0x74
 8003230:	9002      	str	r0, [sp, #8]
 8003232:	9006      	str	r0, [sp, #24]
 8003234:	9107      	str	r1, [sp, #28]
 8003236:	9104      	str	r1, [sp, #16]
 8003238:	4808      	ldr	r0, [pc, #32]	; (800325c <siprintf+0x38>)
 800323a:	4909      	ldr	r1, [pc, #36]	; (8003260 <siprintf+0x3c>)
 800323c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003240:	9105      	str	r1, [sp, #20]
 8003242:	6800      	ldr	r0, [r0, #0]
 8003244:	a902      	add	r1, sp, #8
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	f000 f868 	bl	800331c <_svfiprintf_r>
 800324c:	2200      	movs	r2, #0
 800324e:	9b02      	ldr	r3, [sp, #8]
 8003250:	701a      	strb	r2, [r3, #0]
 8003252:	b01c      	add	sp, #112	; 0x70
 8003254:	f85d eb04 	ldr.w	lr, [sp], #4
 8003258:	b003      	add	sp, #12
 800325a:	4770      	bx	lr
 800325c:	2000000c 	.word	0x2000000c
 8003260:	ffff0208 	.word	0xffff0208

08003264 <__ssputs_r>:
 8003264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003268:	688e      	ldr	r6, [r1, #8]
 800326a:	4682      	mov	sl, r0
 800326c:	429e      	cmp	r6, r3
 800326e:	460c      	mov	r4, r1
 8003270:	4690      	mov	r8, r2
 8003272:	461f      	mov	r7, r3
 8003274:	d838      	bhi.n	80032e8 <__ssputs_r+0x84>
 8003276:	898a      	ldrh	r2, [r1, #12]
 8003278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800327c:	d032      	beq.n	80032e4 <__ssputs_r+0x80>
 800327e:	6825      	ldr	r5, [r4, #0]
 8003280:	6909      	ldr	r1, [r1, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	eba5 0901 	sub.w	r9, r5, r1
 8003288:	6965      	ldr	r5, [r4, #20]
 800328a:	444b      	add	r3, r9
 800328c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003290:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003294:	106d      	asrs	r5, r5, #1
 8003296:	429d      	cmp	r5, r3
 8003298:	bf38      	it	cc
 800329a:	461d      	movcc	r5, r3
 800329c:	0553      	lsls	r3, r2, #21
 800329e:	d531      	bpl.n	8003304 <__ssputs_r+0xa0>
 80032a0:	4629      	mov	r1, r5
 80032a2:	f000 fb53 	bl	800394c <_malloc_r>
 80032a6:	4606      	mov	r6, r0
 80032a8:	b950      	cbnz	r0, 80032c0 <__ssputs_r+0x5c>
 80032aa:	230c      	movs	r3, #12
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	f8ca 3000 	str.w	r3, [sl]
 80032b4:	89a3      	ldrh	r3, [r4, #12]
 80032b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ba:	81a3      	strh	r3, [r4, #12]
 80032bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032c0:	464a      	mov	r2, r9
 80032c2:	6921      	ldr	r1, [r4, #16]
 80032c4:	f000 face 	bl	8003864 <memcpy>
 80032c8:	89a3      	ldrh	r3, [r4, #12]
 80032ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032d2:	81a3      	strh	r3, [r4, #12]
 80032d4:	6126      	str	r6, [r4, #16]
 80032d6:	444e      	add	r6, r9
 80032d8:	6026      	str	r6, [r4, #0]
 80032da:	463e      	mov	r6, r7
 80032dc:	6165      	str	r5, [r4, #20]
 80032de:	eba5 0509 	sub.w	r5, r5, r9
 80032e2:	60a5      	str	r5, [r4, #8]
 80032e4:	42be      	cmp	r6, r7
 80032e6:	d900      	bls.n	80032ea <__ssputs_r+0x86>
 80032e8:	463e      	mov	r6, r7
 80032ea:	4632      	mov	r2, r6
 80032ec:	4641      	mov	r1, r8
 80032ee:	6820      	ldr	r0, [r4, #0]
 80032f0:	f000 fac6 	bl	8003880 <memmove>
 80032f4:	68a3      	ldr	r3, [r4, #8]
 80032f6:	6822      	ldr	r2, [r4, #0]
 80032f8:	1b9b      	subs	r3, r3, r6
 80032fa:	4432      	add	r2, r6
 80032fc:	2000      	movs	r0, #0
 80032fe:	60a3      	str	r3, [r4, #8]
 8003300:	6022      	str	r2, [r4, #0]
 8003302:	e7db      	b.n	80032bc <__ssputs_r+0x58>
 8003304:	462a      	mov	r2, r5
 8003306:	f000 fb7b 	bl	8003a00 <_realloc_r>
 800330a:	4606      	mov	r6, r0
 800330c:	2800      	cmp	r0, #0
 800330e:	d1e1      	bne.n	80032d4 <__ssputs_r+0x70>
 8003310:	4650      	mov	r0, sl
 8003312:	6921      	ldr	r1, [r4, #16]
 8003314:	f000 face 	bl	80038b4 <_free_r>
 8003318:	e7c7      	b.n	80032aa <__ssputs_r+0x46>
	...

0800331c <_svfiprintf_r>:
 800331c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003320:	4698      	mov	r8, r3
 8003322:	898b      	ldrh	r3, [r1, #12]
 8003324:	4607      	mov	r7, r0
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	460d      	mov	r5, r1
 800332a:	4614      	mov	r4, r2
 800332c:	b09d      	sub	sp, #116	; 0x74
 800332e:	d50e      	bpl.n	800334e <_svfiprintf_r+0x32>
 8003330:	690b      	ldr	r3, [r1, #16]
 8003332:	b963      	cbnz	r3, 800334e <_svfiprintf_r+0x32>
 8003334:	2140      	movs	r1, #64	; 0x40
 8003336:	f000 fb09 	bl	800394c <_malloc_r>
 800333a:	6028      	str	r0, [r5, #0]
 800333c:	6128      	str	r0, [r5, #16]
 800333e:	b920      	cbnz	r0, 800334a <_svfiprintf_r+0x2e>
 8003340:	230c      	movs	r3, #12
 8003342:	603b      	str	r3, [r7, #0]
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	e0d1      	b.n	80034ee <_svfiprintf_r+0x1d2>
 800334a:	2340      	movs	r3, #64	; 0x40
 800334c:	616b      	str	r3, [r5, #20]
 800334e:	2300      	movs	r3, #0
 8003350:	9309      	str	r3, [sp, #36]	; 0x24
 8003352:	2320      	movs	r3, #32
 8003354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003358:	2330      	movs	r3, #48	; 0x30
 800335a:	f04f 0901 	mov.w	r9, #1
 800335e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003362:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003508 <_svfiprintf_r+0x1ec>
 8003366:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800336a:	4623      	mov	r3, r4
 800336c:	469a      	mov	sl, r3
 800336e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003372:	b10a      	cbz	r2, 8003378 <_svfiprintf_r+0x5c>
 8003374:	2a25      	cmp	r2, #37	; 0x25
 8003376:	d1f9      	bne.n	800336c <_svfiprintf_r+0x50>
 8003378:	ebba 0b04 	subs.w	fp, sl, r4
 800337c:	d00b      	beq.n	8003396 <_svfiprintf_r+0x7a>
 800337e:	465b      	mov	r3, fp
 8003380:	4622      	mov	r2, r4
 8003382:	4629      	mov	r1, r5
 8003384:	4638      	mov	r0, r7
 8003386:	f7ff ff6d 	bl	8003264 <__ssputs_r>
 800338a:	3001      	adds	r0, #1
 800338c:	f000 80aa 	beq.w	80034e4 <_svfiprintf_r+0x1c8>
 8003390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003392:	445a      	add	r2, fp
 8003394:	9209      	str	r2, [sp, #36]	; 0x24
 8003396:	f89a 3000 	ldrb.w	r3, [sl]
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a2 	beq.w	80034e4 <_svfiprintf_r+0x1c8>
 80033a0:	2300      	movs	r3, #0
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033aa:	f10a 0a01 	add.w	sl, sl, #1
 80033ae:	9304      	str	r3, [sp, #16]
 80033b0:	9307      	str	r3, [sp, #28]
 80033b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033b6:	931a      	str	r3, [sp, #104]	; 0x68
 80033b8:	4654      	mov	r4, sl
 80033ba:	2205      	movs	r2, #5
 80033bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033c0:	4851      	ldr	r0, [pc, #324]	; (8003508 <_svfiprintf_r+0x1ec>)
 80033c2:	f000 fa41 	bl	8003848 <memchr>
 80033c6:	9a04      	ldr	r2, [sp, #16]
 80033c8:	b9d8      	cbnz	r0, 8003402 <_svfiprintf_r+0xe6>
 80033ca:	06d0      	lsls	r0, r2, #27
 80033cc:	bf44      	itt	mi
 80033ce:	2320      	movmi	r3, #32
 80033d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033d4:	0711      	lsls	r1, r2, #28
 80033d6:	bf44      	itt	mi
 80033d8:	232b      	movmi	r3, #43	; 0x2b
 80033da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80033de:	f89a 3000 	ldrb.w	r3, [sl]
 80033e2:	2b2a      	cmp	r3, #42	; 0x2a
 80033e4:	d015      	beq.n	8003412 <_svfiprintf_r+0xf6>
 80033e6:	4654      	mov	r4, sl
 80033e8:	2000      	movs	r0, #0
 80033ea:	f04f 0c0a 	mov.w	ip, #10
 80033ee:	9a07      	ldr	r2, [sp, #28]
 80033f0:	4621      	mov	r1, r4
 80033f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033f6:	3b30      	subs	r3, #48	; 0x30
 80033f8:	2b09      	cmp	r3, #9
 80033fa:	d94e      	bls.n	800349a <_svfiprintf_r+0x17e>
 80033fc:	b1b0      	cbz	r0, 800342c <_svfiprintf_r+0x110>
 80033fe:	9207      	str	r2, [sp, #28]
 8003400:	e014      	b.n	800342c <_svfiprintf_r+0x110>
 8003402:	eba0 0308 	sub.w	r3, r0, r8
 8003406:	fa09 f303 	lsl.w	r3, r9, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	46a2      	mov	sl, r4
 800340e:	9304      	str	r3, [sp, #16]
 8003410:	e7d2      	b.n	80033b8 <_svfiprintf_r+0x9c>
 8003412:	9b03      	ldr	r3, [sp, #12]
 8003414:	1d19      	adds	r1, r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	9103      	str	r1, [sp, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	bfbb      	ittet	lt
 800341e:	425b      	neglt	r3, r3
 8003420:	f042 0202 	orrlt.w	r2, r2, #2
 8003424:	9307      	strge	r3, [sp, #28]
 8003426:	9307      	strlt	r3, [sp, #28]
 8003428:	bfb8      	it	lt
 800342a:	9204      	strlt	r2, [sp, #16]
 800342c:	7823      	ldrb	r3, [r4, #0]
 800342e:	2b2e      	cmp	r3, #46	; 0x2e
 8003430:	d10c      	bne.n	800344c <_svfiprintf_r+0x130>
 8003432:	7863      	ldrb	r3, [r4, #1]
 8003434:	2b2a      	cmp	r3, #42	; 0x2a
 8003436:	d135      	bne.n	80034a4 <_svfiprintf_r+0x188>
 8003438:	9b03      	ldr	r3, [sp, #12]
 800343a:	3402      	adds	r4, #2
 800343c:	1d1a      	adds	r2, r3, #4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	9203      	str	r2, [sp, #12]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	f04f 33ff 	movlt.w	r3, #4294967295
 800344a:	9305      	str	r3, [sp, #20]
 800344c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003518 <_svfiprintf_r+0x1fc>
 8003450:	2203      	movs	r2, #3
 8003452:	4650      	mov	r0, sl
 8003454:	7821      	ldrb	r1, [r4, #0]
 8003456:	f000 f9f7 	bl	8003848 <memchr>
 800345a:	b140      	cbz	r0, 800346e <_svfiprintf_r+0x152>
 800345c:	2340      	movs	r3, #64	; 0x40
 800345e:	eba0 000a 	sub.w	r0, r0, sl
 8003462:	fa03 f000 	lsl.w	r0, r3, r0
 8003466:	9b04      	ldr	r3, [sp, #16]
 8003468:	3401      	adds	r4, #1
 800346a:	4303      	orrs	r3, r0
 800346c:	9304      	str	r3, [sp, #16]
 800346e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003472:	2206      	movs	r2, #6
 8003474:	4825      	ldr	r0, [pc, #148]	; (800350c <_svfiprintf_r+0x1f0>)
 8003476:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800347a:	f000 f9e5 	bl	8003848 <memchr>
 800347e:	2800      	cmp	r0, #0
 8003480:	d038      	beq.n	80034f4 <_svfiprintf_r+0x1d8>
 8003482:	4b23      	ldr	r3, [pc, #140]	; (8003510 <_svfiprintf_r+0x1f4>)
 8003484:	bb1b      	cbnz	r3, 80034ce <_svfiprintf_r+0x1b2>
 8003486:	9b03      	ldr	r3, [sp, #12]
 8003488:	3307      	adds	r3, #7
 800348a:	f023 0307 	bic.w	r3, r3, #7
 800348e:	3308      	adds	r3, #8
 8003490:	9303      	str	r3, [sp, #12]
 8003492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003494:	4433      	add	r3, r6
 8003496:	9309      	str	r3, [sp, #36]	; 0x24
 8003498:	e767      	b.n	800336a <_svfiprintf_r+0x4e>
 800349a:	460c      	mov	r4, r1
 800349c:	2001      	movs	r0, #1
 800349e:	fb0c 3202 	mla	r2, ip, r2, r3
 80034a2:	e7a5      	b.n	80033f0 <_svfiprintf_r+0xd4>
 80034a4:	2300      	movs	r3, #0
 80034a6:	f04f 0c0a 	mov.w	ip, #10
 80034aa:	4619      	mov	r1, r3
 80034ac:	3401      	adds	r4, #1
 80034ae:	9305      	str	r3, [sp, #20]
 80034b0:	4620      	mov	r0, r4
 80034b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034b6:	3a30      	subs	r2, #48	; 0x30
 80034b8:	2a09      	cmp	r2, #9
 80034ba:	d903      	bls.n	80034c4 <_svfiprintf_r+0x1a8>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0c5      	beq.n	800344c <_svfiprintf_r+0x130>
 80034c0:	9105      	str	r1, [sp, #20]
 80034c2:	e7c3      	b.n	800344c <_svfiprintf_r+0x130>
 80034c4:	4604      	mov	r4, r0
 80034c6:	2301      	movs	r3, #1
 80034c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80034cc:	e7f0      	b.n	80034b0 <_svfiprintf_r+0x194>
 80034ce:	ab03      	add	r3, sp, #12
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	462a      	mov	r2, r5
 80034d4:	4638      	mov	r0, r7
 80034d6:	4b0f      	ldr	r3, [pc, #60]	; (8003514 <_svfiprintf_r+0x1f8>)
 80034d8:	a904      	add	r1, sp, #16
 80034da:	f3af 8000 	nop.w
 80034de:	1c42      	adds	r2, r0, #1
 80034e0:	4606      	mov	r6, r0
 80034e2:	d1d6      	bne.n	8003492 <_svfiprintf_r+0x176>
 80034e4:	89ab      	ldrh	r3, [r5, #12]
 80034e6:	065b      	lsls	r3, r3, #25
 80034e8:	f53f af2c 	bmi.w	8003344 <_svfiprintf_r+0x28>
 80034ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034ee:	b01d      	add	sp, #116	; 0x74
 80034f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f4:	ab03      	add	r3, sp, #12
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	462a      	mov	r2, r5
 80034fa:	4638      	mov	r0, r7
 80034fc:	4b05      	ldr	r3, [pc, #20]	; (8003514 <_svfiprintf_r+0x1f8>)
 80034fe:	a904      	add	r1, sp, #16
 8003500:	f000 f87c 	bl	80035fc <_printf_i>
 8003504:	e7eb      	b.n	80034de <_svfiprintf_r+0x1c2>
 8003506:	bf00      	nop
 8003508:	08003aec 	.word	0x08003aec
 800350c:	08003af6 	.word	0x08003af6
 8003510:	00000000 	.word	0x00000000
 8003514:	08003265 	.word	0x08003265
 8003518:	08003af2 	.word	0x08003af2

0800351c <_printf_common>:
 800351c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003520:	4616      	mov	r6, r2
 8003522:	4699      	mov	r9, r3
 8003524:	688a      	ldr	r2, [r1, #8]
 8003526:	690b      	ldr	r3, [r1, #16]
 8003528:	4607      	mov	r7, r0
 800352a:	4293      	cmp	r3, r2
 800352c:	bfb8      	it	lt
 800352e:	4613      	movlt	r3, r2
 8003530:	6033      	str	r3, [r6, #0]
 8003532:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003536:	460c      	mov	r4, r1
 8003538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800353c:	b10a      	cbz	r2, 8003542 <_printf_common+0x26>
 800353e:	3301      	adds	r3, #1
 8003540:	6033      	str	r3, [r6, #0]
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	0699      	lsls	r1, r3, #26
 8003546:	bf42      	ittt	mi
 8003548:	6833      	ldrmi	r3, [r6, #0]
 800354a:	3302      	addmi	r3, #2
 800354c:	6033      	strmi	r3, [r6, #0]
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	f015 0506 	ands.w	r5, r5, #6
 8003554:	d106      	bne.n	8003564 <_printf_common+0x48>
 8003556:	f104 0a19 	add.w	sl, r4, #25
 800355a:	68e3      	ldr	r3, [r4, #12]
 800355c:	6832      	ldr	r2, [r6, #0]
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	42ab      	cmp	r3, r5
 8003562:	dc28      	bgt.n	80035b6 <_printf_common+0x9a>
 8003564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003568:	1e13      	subs	r3, r2, #0
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	bf18      	it	ne
 800356e:	2301      	movne	r3, #1
 8003570:	0692      	lsls	r2, r2, #26
 8003572:	d42d      	bmi.n	80035d0 <_printf_common+0xb4>
 8003574:	4649      	mov	r1, r9
 8003576:	4638      	mov	r0, r7
 8003578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800357c:	47c0      	blx	r8
 800357e:	3001      	adds	r0, #1
 8003580:	d020      	beq.n	80035c4 <_printf_common+0xa8>
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	68e5      	ldr	r5, [r4, #12]
 8003586:	f003 0306 	and.w	r3, r3, #6
 800358a:	2b04      	cmp	r3, #4
 800358c:	bf18      	it	ne
 800358e:	2500      	movne	r5, #0
 8003590:	6832      	ldr	r2, [r6, #0]
 8003592:	f04f 0600 	mov.w	r6, #0
 8003596:	68a3      	ldr	r3, [r4, #8]
 8003598:	bf08      	it	eq
 800359a:	1aad      	subeq	r5, r5, r2
 800359c:	6922      	ldr	r2, [r4, #16]
 800359e:	bf08      	it	eq
 80035a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bfc4      	itt	gt
 80035a8:	1a9b      	subgt	r3, r3, r2
 80035aa:	18ed      	addgt	r5, r5, r3
 80035ac:	341a      	adds	r4, #26
 80035ae:	42b5      	cmp	r5, r6
 80035b0:	d11a      	bne.n	80035e8 <_printf_common+0xcc>
 80035b2:	2000      	movs	r0, #0
 80035b4:	e008      	b.n	80035c8 <_printf_common+0xac>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4652      	mov	r2, sl
 80035ba:	4649      	mov	r1, r9
 80035bc:	4638      	mov	r0, r7
 80035be:	47c0      	blx	r8
 80035c0:	3001      	adds	r0, #1
 80035c2:	d103      	bne.n	80035cc <_printf_common+0xb0>
 80035c4:	f04f 30ff 	mov.w	r0, #4294967295
 80035c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035cc:	3501      	adds	r5, #1
 80035ce:	e7c4      	b.n	800355a <_printf_common+0x3e>
 80035d0:	2030      	movs	r0, #48	; 0x30
 80035d2:	18e1      	adds	r1, r4, r3
 80035d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035de:	4422      	add	r2, r4
 80035e0:	3302      	adds	r3, #2
 80035e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035e6:	e7c5      	b.n	8003574 <_printf_common+0x58>
 80035e8:	2301      	movs	r3, #1
 80035ea:	4622      	mov	r2, r4
 80035ec:	4649      	mov	r1, r9
 80035ee:	4638      	mov	r0, r7
 80035f0:	47c0      	blx	r8
 80035f2:	3001      	adds	r0, #1
 80035f4:	d0e6      	beq.n	80035c4 <_printf_common+0xa8>
 80035f6:	3601      	adds	r6, #1
 80035f8:	e7d9      	b.n	80035ae <_printf_common+0x92>
	...

080035fc <_printf_i>:
 80035fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003600:	460c      	mov	r4, r1
 8003602:	7e27      	ldrb	r7, [r4, #24]
 8003604:	4691      	mov	r9, r2
 8003606:	2f78      	cmp	r7, #120	; 0x78
 8003608:	4680      	mov	r8, r0
 800360a:	469a      	mov	sl, r3
 800360c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800360e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003612:	d807      	bhi.n	8003624 <_printf_i+0x28>
 8003614:	2f62      	cmp	r7, #98	; 0x62
 8003616:	d80a      	bhi.n	800362e <_printf_i+0x32>
 8003618:	2f00      	cmp	r7, #0
 800361a:	f000 80d9 	beq.w	80037d0 <_printf_i+0x1d4>
 800361e:	2f58      	cmp	r7, #88	; 0x58
 8003620:	f000 80a4 	beq.w	800376c <_printf_i+0x170>
 8003624:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800362c:	e03a      	b.n	80036a4 <_printf_i+0xa8>
 800362e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003632:	2b15      	cmp	r3, #21
 8003634:	d8f6      	bhi.n	8003624 <_printf_i+0x28>
 8003636:	a001      	add	r0, pc, #4	; (adr r0, 800363c <_printf_i+0x40>)
 8003638:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800363c:	08003695 	.word	0x08003695
 8003640:	080036a9 	.word	0x080036a9
 8003644:	08003625 	.word	0x08003625
 8003648:	08003625 	.word	0x08003625
 800364c:	08003625 	.word	0x08003625
 8003650:	08003625 	.word	0x08003625
 8003654:	080036a9 	.word	0x080036a9
 8003658:	08003625 	.word	0x08003625
 800365c:	08003625 	.word	0x08003625
 8003660:	08003625 	.word	0x08003625
 8003664:	08003625 	.word	0x08003625
 8003668:	080037b7 	.word	0x080037b7
 800366c:	080036d9 	.word	0x080036d9
 8003670:	08003799 	.word	0x08003799
 8003674:	08003625 	.word	0x08003625
 8003678:	08003625 	.word	0x08003625
 800367c:	080037d9 	.word	0x080037d9
 8003680:	08003625 	.word	0x08003625
 8003684:	080036d9 	.word	0x080036d9
 8003688:	08003625 	.word	0x08003625
 800368c:	08003625 	.word	0x08003625
 8003690:	080037a1 	.word	0x080037a1
 8003694:	680b      	ldr	r3, [r1, #0]
 8003696:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	600a      	str	r2, [r1, #0]
 80036a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036a4:	2301      	movs	r3, #1
 80036a6:	e0a4      	b.n	80037f2 <_printf_i+0x1f6>
 80036a8:	6825      	ldr	r5, [r4, #0]
 80036aa:	6808      	ldr	r0, [r1, #0]
 80036ac:	062e      	lsls	r6, r5, #24
 80036ae:	f100 0304 	add.w	r3, r0, #4
 80036b2:	d50a      	bpl.n	80036ca <_printf_i+0xce>
 80036b4:	6805      	ldr	r5, [r0, #0]
 80036b6:	600b      	str	r3, [r1, #0]
 80036b8:	2d00      	cmp	r5, #0
 80036ba:	da03      	bge.n	80036c4 <_printf_i+0xc8>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	426d      	negs	r5, r5
 80036c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c4:	230a      	movs	r3, #10
 80036c6:	485e      	ldr	r0, [pc, #376]	; (8003840 <_printf_i+0x244>)
 80036c8:	e019      	b.n	80036fe <_printf_i+0x102>
 80036ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 80036ce:	6805      	ldr	r5, [r0, #0]
 80036d0:	600b      	str	r3, [r1, #0]
 80036d2:	bf18      	it	ne
 80036d4:	b22d      	sxthne	r5, r5
 80036d6:	e7ef      	b.n	80036b8 <_printf_i+0xbc>
 80036d8:	680b      	ldr	r3, [r1, #0]
 80036da:	6825      	ldr	r5, [r4, #0]
 80036dc:	1d18      	adds	r0, r3, #4
 80036de:	6008      	str	r0, [r1, #0]
 80036e0:	0628      	lsls	r0, r5, #24
 80036e2:	d501      	bpl.n	80036e8 <_printf_i+0xec>
 80036e4:	681d      	ldr	r5, [r3, #0]
 80036e6:	e002      	b.n	80036ee <_printf_i+0xf2>
 80036e8:	0669      	lsls	r1, r5, #25
 80036ea:	d5fb      	bpl.n	80036e4 <_printf_i+0xe8>
 80036ec:	881d      	ldrh	r5, [r3, #0]
 80036ee:	2f6f      	cmp	r7, #111	; 0x6f
 80036f0:	bf0c      	ite	eq
 80036f2:	2308      	moveq	r3, #8
 80036f4:	230a      	movne	r3, #10
 80036f6:	4852      	ldr	r0, [pc, #328]	; (8003840 <_printf_i+0x244>)
 80036f8:	2100      	movs	r1, #0
 80036fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036fe:	6866      	ldr	r6, [r4, #4]
 8003700:	2e00      	cmp	r6, #0
 8003702:	bfa8      	it	ge
 8003704:	6821      	ldrge	r1, [r4, #0]
 8003706:	60a6      	str	r6, [r4, #8]
 8003708:	bfa4      	itt	ge
 800370a:	f021 0104 	bicge.w	r1, r1, #4
 800370e:	6021      	strge	r1, [r4, #0]
 8003710:	b90d      	cbnz	r5, 8003716 <_printf_i+0x11a>
 8003712:	2e00      	cmp	r6, #0
 8003714:	d04d      	beq.n	80037b2 <_printf_i+0x1b6>
 8003716:	4616      	mov	r6, r2
 8003718:	fbb5 f1f3 	udiv	r1, r5, r3
 800371c:	fb03 5711 	mls	r7, r3, r1, r5
 8003720:	5dc7      	ldrb	r7, [r0, r7]
 8003722:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003726:	462f      	mov	r7, r5
 8003728:	42bb      	cmp	r3, r7
 800372a:	460d      	mov	r5, r1
 800372c:	d9f4      	bls.n	8003718 <_printf_i+0x11c>
 800372e:	2b08      	cmp	r3, #8
 8003730:	d10b      	bne.n	800374a <_printf_i+0x14e>
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	07df      	lsls	r7, r3, #31
 8003736:	d508      	bpl.n	800374a <_printf_i+0x14e>
 8003738:	6923      	ldr	r3, [r4, #16]
 800373a:	6861      	ldr	r1, [r4, #4]
 800373c:	4299      	cmp	r1, r3
 800373e:	bfde      	ittt	le
 8003740:	2330      	movle	r3, #48	; 0x30
 8003742:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003746:	f106 36ff 	addle.w	r6, r6, #4294967295
 800374a:	1b92      	subs	r2, r2, r6
 800374c:	6122      	str	r2, [r4, #16]
 800374e:	464b      	mov	r3, r9
 8003750:	4621      	mov	r1, r4
 8003752:	4640      	mov	r0, r8
 8003754:	f8cd a000 	str.w	sl, [sp]
 8003758:	aa03      	add	r2, sp, #12
 800375a:	f7ff fedf 	bl	800351c <_printf_common>
 800375e:	3001      	adds	r0, #1
 8003760:	d14c      	bne.n	80037fc <_printf_i+0x200>
 8003762:	f04f 30ff 	mov.w	r0, #4294967295
 8003766:	b004      	add	sp, #16
 8003768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800376c:	4834      	ldr	r0, [pc, #208]	; (8003840 <_printf_i+0x244>)
 800376e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003772:	680e      	ldr	r6, [r1, #0]
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	f856 5b04 	ldr.w	r5, [r6], #4
 800377a:	061f      	lsls	r7, r3, #24
 800377c:	600e      	str	r6, [r1, #0]
 800377e:	d514      	bpl.n	80037aa <_printf_i+0x1ae>
 8003780:	07d9      	lsls	r1, r3, #31
 8003782:	bf44      	itt	mi
 8003784:	f043 0320 	orrmi.w	r3, r3, #32
 8003788:	6023      	strmi	r3, [r4, #0]
 800378a:	b91d      	cbnz	r5, 8003794 <_printf_i+0x198>
 800378c:	6823      	ldr	r3, [r4, #0]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	6023      	str	r3, [r4, #0]
 8003794:	2310      	movs	r3, #16
 8003796:	e7af      	b.n	80036f8 <_printf_i+0xfc>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	2378      	movs	r3, #120	; 0x78
 80037a2:	4828      	ldr	r0, [pc, #160]	; (8003844 <_printf_i+0x248>)
 80037a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037a8:	e7e3      	b.n	8003772 <_printf_i+0x176>
 80037aa:	065e      	lsls	r6, r3, #25
 80037ac:	bf48      	it	mi
 80037ae:	b2ad      	uxthmi	r5, r5
 80037b0:	e7e6      	b.n	8003780 <_printf_i+0x184>
 80037b2:	4616      	mov	r6, r2
 80037b4:	e7bb      	b.n	800372e <_printf_i+0x132>
 80037b6:	680b      	ldr	r3, [r1, #0]
 80037b8:	6826      	ldr	r6, [r4, #0]
 80037ba:	1d1d      	adds	r5, r3, #4
 80037bc:	6960      	ldr	r0, [r4, #20]
 80037be:	600d      	str	r5, [r1, #0]
 80037c0:	0635      	lsls	r5, r6, #24
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0x1ce>
 80037c6:	6018      	str	r0, [r3, #0]
 80037c8:	e002      	b.n	80037d0 <_printf_i+0x1d4>
 80037ca:	0671      	lsls	r1, r6, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0x1ca>
 80037ce:	8018      	strh	r0, [r3, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	4616      	mov	r6, r2
 80037d4:	6123      	str	r3, [r4, #16]
 80037d6:	e7ba      	b.n	800374e <_printf_i+0x152>
 80037d8:	680b      	ldr	r3, [r1, #0]
 80037da:	1d1a      	adds	r2, r3, #4
 80037dc:	600a      	str	r2, [r1, #0]
 80037de:	681e      	ldr	r6, [r3, #0]
 80037e0:	2100      	movs	r1, #0
 80037e2:	4630      	mov	r0, r6
 80037e4:	6862      	ldr	r2, [r4, #4]
 80037e6:	f000 f82f 	bl	8003848 <memchr>
 80037ea:	b108      	cbz	r0, 80037f0 <_printf_i+0x1f4>
 80037ec:	1b80      	subs	r0, r0, r6
 80037ee:	6060      	str	r0, [r4, #4]
 80037f0:	6863      	ldr	r3, [r4, #4]
 80037f2:	6123      	str	r3, [r4, #16]
 80037f4:	2300      	movs	r3, #0
 80037f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037fa:	e7a8      	b.n	800374e <_printf_i+0x152>
 80037fc:	4632      	mov	r2, r6
 80037fe:	4649      	mov	r1, r9
 8003800:	4640      	mov	r0, r8
 8003802:	6923      	ldr	r3, [r4, #16]
 8003804:	47d0      	blx	sl
 8003806:	3001      	adds	r0, #1
 8003808:	d0ab      	beq.n	8003762 <_printf_i+0x166>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	079b      	lsls	r3, r3, #30
 800380e:	d413      	bmi.n	8003838 <_printf_i+0x23c>
 8003810:	68e0      	ldr	r0, [r4, #12]
 8003812:	9b03      	ldr	r3, [sp, #12]
 8003814:	4298      	cmp	r0, r3
 8003816:	bfb8      	it	lt
 8003818:	4618      	movlt	r0, r3
 800381a:	e7a4      	b.n	8003766 <_printf_i+0x16a>
 800381c:	2301      	movs	r3, #1
 800381e:	4632      	mov	r2, r6
 8003820:	4649      	mov	r1, r9
 8003822:	4640      	mov	r0, r8
 8003824:	47d0      	blx	sl
 8003826:	3001      	adds	r0, #1
 8003828:	d09b      	beq.n	8003762 <_printf_i+0x166>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9903      	ldr	r1, [sp, #12]
 8003830:	1a5b      	subs	r3, r3, r1
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf2      	bgt.n	800381c <_printf_i+0x220>
 8003836:	e7eb      	b.n	8003810 <_printf_i+0x214>
 8003838:	2500      	movs	r5, #0
 800383a:	f104 0619 	add.w	r6, r4, #25
 800383e:	e7f5      	b.n	800382c <_printf_i+0x230>
 8003840:	08003afd 	.word	0x08003afd
 8003844:	08003b0e 	.word	0x08003b0e

08003848 <memchr>:
 8003848:	4603      	mov	r3, r0
 800384a:	b510      	push	{r4, lr}
 800384c:	b2c9      	uxtb	r1, r1
 800384e:	4402      	add	r2, r0
 8003850:	4293      	cmp	r3, r2
 8003852:	4618      	mov	r0, r3
 8003854:	d101      	bne.n	800385a <memchr+0x12>
 8003856:	2000      	movs	r0, #0
 8003858:	e003      	b.n	8003862 <memchr+0x1a>
 800385a:	7804      	ldrb	r4, [r0, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	428c      	cmp	r4, r1
 8003860:	d1f6      	bne.n	8003850 <memchr+0x8>
 8003862:	bd10      	pop	{r4, pc}

08003864 <memcpy>:
 8003864:	440a      	add	r2, r1
 8003866:	4291      	cmp	r1, r2
 8003868:	f100 33ff 	add.w	r3, r0, #4294967295
 800386c:	d100      	bne.n	8003870 <memcpy+0xc>
 800386e:	4770      	bx	lr
 8003870:	b510      	push	{r4, lr}
 8003872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003876:	4291      	cmp	r1, r2
 8003878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800387c:	d1f9      	bne.n	8003872 <memcpy+0xe>
 800387e:	bd10      	pop	{r4, pc}

08003880 <memmove>:
 8003880:	4288      	cmp	r0, r1
 8003882:	b510      	push	{r4, lr}
 8003884:	eb01 0402 	add.w	r4, r1, r2
 8003888:	d902      	bls.n	8003890 <memmove+0x10>
 800388a:	4284      	cmp	r4, r0
 800388c:	4623      	mov	r3, r4
 800388e:	d807      	bhi.n	80038a0 <memmove+0x20>
 8003890:	1e43      	subs	r3, r0, #1
 8003892:	42a1      	cmp	r1, r4
 8003894:	d008      	beq.n	80038a8 <memmove+0x28>
 8003896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800389a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800389e:	e7f8      	b.n	8003892 <memmove+0x12>
 80038a0:	4601      	mov	r1, r0
 80038a2:	4402      	add	r2, r0
 80038a4:	428a      	cmp	r2, r1
 80038a6:	d100      	bne.n	80038aa <memmove+0x2a>
 80038a8:	bd10      	pop	{r4, pc}
 80038aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038b2:	e7f7      	b.n	80038a4 <memmove+0x24>

080038b4 <_free_r>:
 80038b4:	b538      	push	{r3, r4, r5, lr}
 80038b6:	4605      	mov	r5, r0
 80038b8:	2900      	cmp	r1, #0
 80038ba:	d043      	beq.n	8003944 <_free_r+0x90>
 80038bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038c0:	1f0c      	subs	r4, r1, #4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bfb8      	it	lt
 80038c6:	18e4      	addlt	r4, r4, r3
 80038c8:	f000 f8d0 	bl	8003a6c <__malloc_lock>
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <_free_r+0x94>)
 80038ce:	6813      	ldr	r3, [r2, #0]
 80038d0:	4610      	mov	r0, r2
 80038d2:	b933      	cbnz	r3, 80038e2 <_free_r+0x2e>
 80038d4:	6063      	str	r3, [r4, #4]
 80038d6:	6014      	str	r4, [r2, #0]
 80038d8:	4628      	mov	r0, r5
 80038da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038de:	f000 b8cb 	b.w	8003a78 <__malloc_unlock>
 80038e2:	42a3      	cmp	r3, r4
 80038e4:	d90a      	bls.n	80038fc <_free_r+0x48>
 80038e6:	6821      	ldr	r1, [r4, #0]
 80038e8:	1862      	adds	r2, r4, r1
 80038ea:	4293      	cmp	r3, r2
 80038ec:	bf01      	itttt	eq
 80038ee:	681a      	ldreq	r2, [r3, #0]
 80038f0:	685b      	ldreq	r3, [r3, #4]
 80038f2:	1852      	addeq	r2, r2, r1
 80038f4:	6022      	streq	r2, [r4, #0]
 80038f6:	6063      	str	r3, [r4, #4]
 80038f8:	6004      	str	r4, [r0, #0]
 80038fa:	e7ed      	b.n	80038d8 <_free_r+0x24>
 80038fc:	461a      	mov	r2, r3
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	b10b      	cbz	r3, 8003906 <_free_r+0x52>
 8003902:	42a3      	cmp	r3, r4
 8003904:	d9fa      	bls.n	80038fc <_free_r+0x48>
 8003906:	6811      	ldr	r1, [r2, #0]
 8003908:	1850      	adds	r0, r2, r1
 800390a:	42a0      	cmp	r0, r4
 800390c:	d10b      	bne.n	8003926 <_free_r+0x72>
 800390e:	6820      	ldr	r0, [r4, #0]
 8003910:	4401      	add	r1, r0
 8003912:	1850      	adds	r0, r2, r1
 8003914:	4283      	cmp	r3, r0
 8003916:	6011      	str	r1, [r2, #0]
 8003918:	d1de      	bne.n	80038d8 <_free_r+0x24>
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4401      	add	r1, r0
 8003920:	6011      	str	r1, [r2, #0]
 8003922:	6053      	str	r3, [r2, #4]
 8003924:	e7d8      	b.n	80038d8 <_free_r+0x24>
 8003926:	d902      	bls.n	800392e <_free_r+0x7a>
 8003928:	230c      	movs	r3, #12
 800392a:	602b      	str	r3, [r5, #0]
 800392c:	e7d4      	b.n	80038d8 <_free_r+0x24>
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	1821      	adds	r1, r4, r0
 8003932:	428b      	cmp	r3, r1
 8003934:	bf01      	itttt	eq
 8003936:	6819      	ldreq	r1, [r3, #0]
 8003938:	685b      	ldreq	r3, [r3, #4]
 800393a:	1809      	addeq	r1, r1, r0
 800393c:	6021      	streq	r1, [r4, #0]
 800393e:	6063      	str	r3, [r4, #4]
 8003940:	6054      	str	r4, [r2, #4]
 8003942:	e7c9      	b.n	80038d8 <_free_r+0x24>
 8003944:	bd38      	pop	{r3, r4, r5, pc}
 8003946:	bf00      	nop
 8003948:	20000090 	.word	0x20000090

0800394c <_malloc_r>:
 800394c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394e:	1ccd      	adds	r5, r1, #3
 8003950:	f025 0503 	bic.w	r5, r5, #3
 8003954:	3508      	adds	r5, #8
 8003956:	2d0c      	cmp	r5, #12
 8003958:	bf38      	it	cc
 800395a:	250c      	movcc	r5, #12
 800395c:	2d00      	cmp	r5, #0
 800395e:	4606      	mov	r6, r0
 8003960:	db01      	blt.n	8003966 <_malloc_r+0x1a>
 8003962:	42a9      	cmp	r1, r5
 8003964:	d903      	bls.n	800396e <_malloc_r+0x22>
 8003966:	230c      	movs	r3, #12
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	2000      	movs	r0, #0
 800396c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800396e:	f000 f87d 	bl	8003a6c <__malloc_lock>
 8003972:	4921      	ldr	r1, [pc, #132]	; (80039f8 <_malloc_r+0xac>)
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	4614      	mov	r4, r2
 8003978:	b99c      	cbnz	r4, 80039a2 <_malloc_r+0x56>
 800397a:	4f20      	ldr	r7, [pc, #128]	; (80039fc <_malloc_r+0xb0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b923      	cbnz	r3, 800398a <_malloc_r+0x3e>
 8003980:	4621      	mov	r1, r4
 8003982:	4630      	mov	r0, r6
 8003984:	f000 f862 	bl	8003a4c <_sbrk_r>
 8003988:	6038      	str	r0, [r7, #0]
 800398a:	4629      	mov	r1, r5
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f85d 	bl	8003a4c <_sbrk_r>
 8003992:	1c43      	adds	r3, r0, #1
 8003994:	d123      	bne.n	80039de <_malloc_r+0x92>
 8003996:	230c      	movs	r3, #12
 8003998:	4630      	mov	r0, r6
 800399a:	6033      	str	r3, [r6, #0]
 800399c:	f000 f86c 	bl	8003a78 <__malloc_unlock>
 80039a0:	e7e3      	b.n	800396a <_malloc_r+0x1e>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	1b5b      	subs	r3, r3, r5
 80039a6:	d417      	bmi.n	80039d8 <_malloc_r+0x8c>
 80039a8:	2b0b      	cmp	r3, #11
 80039aa:	d903      	bls.n	80039b4 <_malloc_r+0x68>
 80039ac:	6023      	str	r3, [r4, #0]
 80039ae:	441c      	add	r4, r3
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	e004      	b.n	80039be <_malloc_r+0x72>
 80039b4:	6863      	ldr	r3, [r4, #4]
 80039b6:	42a2      	cmp	r2, r4
 80039b8:	bf0c      	ite	eq
 80039ba:	600b      	streq	r3, [r1, #0]
 80039bc:	6053      	strne	r3, [r2, #4]
 80039be:	4630      	mov	r0, r6
 80039c0:	f000 f85a 	bl	8003a78 <__malloc_unlock>
 80039c4:	f104 000b 	add.w	r0, r4, #11
 80039c8:	1d23      	adds	r3, r4, #4
 80039ca:	f020 0007 	bic.w	r0, r0, #7
 80039ce:	1ac2      	subs	r2, r0, r3
 80039d0:	d0cc      	beq.n	800396c <_malloc_r+0x20>
 80039d2:	1a1b      	subs	r3, r3, r0
 80039d4:	50a3      	str	r3, [r4, r2]
 80039d6:	e7c9      	b.n	800396c <_malloc_r+0x20>
 80039d8:	4622      	mov	r2, r4
 80039da:	6864      	ldr	r4, [r4, #4]
 80039dc:	e7cc      	b.n	8003978 <_malloc_r+0x2c>
 80039de:	1cc4      	adds	r4, r0, #3
 80039e0:	f024 0403 	bic.w	r4, r4, #3
 80039e4:	42a0      	cmp	r0, r4
 80039e6:	d0e3      	beq.n	80039b0 <_malloc_r+0x64>
 80039e8:	1a21      	subs	r1, r4, r0
 80039ea:	4630      	mov	r0, r6
 80039ec:	f000 f82e 	bl	8003a4c <_sbrk_r>
 80039f0:	3001      	adds	r0, #1
 80039f2:	d1dd      	bne.n	80039b0 <_malloc_r+0x64>
 80039f4:	e7cf      	b.n	8003996 <_malloc_r+0x4a>
 80039f6:	bf00      	nop
 80039f8:	20000090 	.word	0x20000090
 80039fc:	20000094 	.word	0x20000094

08003a00 <_realloc_r>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	4607      	mov	r7, r0
 8003a04:	4614      	mov	r4, r2
 8003a06:	460e      	mov	r6, r1
 8003a08:	b921      	cbnz	r1, 8003a14 <_realloc_r+0x14>
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003a10:	f7ff bf9c 	b.w	800394c <_malloc_r>
 8003a14:	b922      	cbnz	r2, 8003a20 <_realloc_r+0x20>
 8003a16:	f7ff ff4d 	bl	80038b4 <_free_r>
 8003a1a:	4625      	mov	r5, r4
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a20:	f000 f830 	bl	8003a84 <_malloc_usable_size_r>
 8003a24:	42a0      	cmp	r0, r4
 8003a26:	d20f      	bcs.n	8003a48 <_realloc_r+0x48>
 8003a28:	4621      	mov	r1, r4
 8003a2a:	4638      	mov	r0, r7
 8003a2c:	f7ff ff8e 	bl	800394c <_malloc_r>
 8003a30:	4605      	mov	r5, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d0f2      	beq.n	8003a1c <_realloc_r+0x1c>
 8003a36:	4631      	mov	r1, r6
 8003a38:	4622      	mov	r2, r4
 8003a3a:	f7ff ff13 	bl	8003864 <memcpy>
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4638      	mov	r0, r7
 8003a42:	f7ff ff37 	bl	80038b4 <_free_r>
 8003a46:	e7e9      	b.n	8003a1c <_realloc_r+0x1c>
 8003a48:	4635      	mov	r5, r6
 8003a4a:	e7e7      	b.n	8003a1c <_realloc_r+0x1c>

08003a4c <_sbrk_r>:
 8003a4c:	b538      	push	{r3, r4, r5, lr}
 8003a4e:	2300      	movs	r3, #0
 8003a50:	4d05      	ldr	r5, [pc, #20]	; (8003a68 <_sbrk_r+0x1c>)
 8003a52:	4604      	mov	r4, r0
 8003a54:	4608      	mov	r0, r1
 8003a56:	602b      	str	r3, [r5, #0]
 8003a58:	f7fc fda2 	bl	80005a0 <_sbrk>
 8003a5c:	1c43      	adds	r3, r0, #1
 8003a5e:	d102      	bne.n	8003a66 <_sbrk_r+0x1a>
 8003a60:	682b      	ldr	r3, [r5, #0]
 8003a62:	b103      	cbz	r3, 8003a66 <_sbrk_r+0x1a>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd38      	pop	{r3, r4, r5, pc}
 8003a68:	20000198 	.word	0x20000198

08003a6c <__malloc_lock>:
 8003a6c:	4801      	ldr	r0, [pc, #4]	; (8003a74 <__malloc_lock+0x8>)
 8003a6e:	f000 b811 	b.w	8003a94 <__retarget_lock_acquire_recursive>
 8003a72:	bf00      	nop
 8003a74:	200001a0 	.word	0x200001a0

08003a78 <__malloc_unlock>:
 8003a78:	4801      	ldr	r0, [pc, #4]	; (8003a80 <__malloc_unlock+0x8>)
 8003a7a:	f000 b80c 	b.w	8003a96 <__retarget_lock_release_recursive>
 8003a7e:	bf00      	nop
 8003a80:	200001a0 	.word	0x200001a0

08003a84 <_malloc_usable_size_r>:
 8003a84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a88:	1f18      	subs	r0, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	bfbc      	itt	lt
 8003a8e:	580b      	ldrlt	r3, [r1, r0]
 8003a90:	18c0      	addlt	r0, r0, r3
 8003a92:	4770      	bx	lr

08003a94 <__retarget_lock_acquire_recursive>:
 8003a94:	4770      	bx	lr

08003a96 <__retarget_lock_release_recursive>:
 8003a96:	4770      	bx	lr

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	bf00      	nop
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
